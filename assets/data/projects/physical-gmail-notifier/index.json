{"hash":"8eebc35d47138a110bad003cf8fb26d69c835a60","data":{"project":{"title":"Physical Gmail Notifier","path":"/projects/physical-gmail-notifier/","description":"The Physical Gmail Notifier is a smart IoT device and accompanying app that alerts a user when a new message hits their inbox. The flag on the side of the mailbox raises and lowers at a 90° angles and the screen illuminates when a new message arrives. The screen displays the login information and the total number of new messages. The mailbox can be programed to respond only to specific gmail labels or filters.","content":"<p><span style=\"text-decoration: underline\"><strong>Authors Note</strong></span>:  I developed the Physical Gmail Notifier shortly after teaching myself Python and C++ in 2012.  This was one of my first engineering projects, and in many places (particularly the serial communication), I do not use best practices.  Though I am still proud of the end result, my then lack of programing experience shows in the code examples below.</p>\n<p>The Physical Gmail Notifier is an IoT device and accompanying app that alerts a user when a new message arrives in their inbox. The flag on the side of the mailbox raises and lowers at a 90° angles and the screen illuminates when a new message arrives. The screen displays the login information and the total number of new messages. The mailbox can be programed to respond only to specific gmail labels or filters.</p>\n<p>The mailbox was built using the <a href=\"https://arduino.cc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Arduino</a> Uno microcontroller and several off-the-shelf hardware components.  The flag of the mailbox is raised and lowered using a <strong>miniature servo motor</strong>, user information is displayed using a 16x2 character <strong>LCD display</strong>, and a single button on the side of the device is used for user interaction.</p>\n<p>The microcontroller was programed in the Arduino language (essentially C++ with some domain-specific libraries).</p>\n<p>There is also an accompanying OSX application used to log into Gmail and communicate with the microcontroller over <strong>serial communication</strong>.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 680 357' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-09704fe8f5baab3a87a75178068dde8c'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-09704fe8f5baab3a87a75178068dde8c)' width='680' height='357' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAiCAYAAADvVd%2bPAAAACXBIWXMAAAsTAAALEwEAmpwYAAAPlklEQVRo3s1YB1SUVxb%2bEZgZZgamKUVAbJi1ALZks8nZk0017m6ySVzdTYyajSWrLhoVAekICAJBjRJ7UDTRGHsBRVHUYKEXQQWVIr1LEyz59r43M2T0UMyue87%2b53znvvf%2bN%2b9/97vl3TfC7Bl/xb8WzoGv11KsXbkUX/ktQbDvMixcMA/R0evx7bZvsHfXZmyN8kP4yhVYHxGAVX4eCPD1QWRUJMLDVmF16CqsDPBH6MoAvPTeLAgj/wLR2I9g4vL/D2HW1D9h%2bsdT4b1iKb4OWooI/yUI8nXDon/NxYYNa7B18wZ8t3MLNketRESgJ9aG%2bSBspTd8fVYgMiIc4aHBhBAEBwbSeABe1BFgygn4EMbOH3Jp%2bFE29r%2bGCZO6b/VKwOwZU/G3qX%2bBp4cb1oe4IyJgKUJI0YXzZyMiYhWi10dhT%2bxG7NkZjcjQAEQFr8BXwT7w9vRAWGgowoL9sXpVMIKCAhHi740X/6wlQDxO%2bwFTnSf0c/rgl825/A%2bhV77rW72TICz85z8w89NpWO62GOvCvPBVkAfCQ3yxYO5sUjAYayPDEPttNA4d2IW1UasQFeJJBHgRAZ5YFbwSYUH%2biFwdhpCQEIT4eeOV9z%2bDMPpDGDmR0s70gVHatnTiNEjG/5UImULhMYXLpyF6HhhHaxko3RcJwoIv/gHXL2bAfdkisqQ//D2XwNV1Pj6ZOQO%2bvl7wCwzChrUR2BYVgpU%2byxDo7go/t4Vwnf9PeHkshxf9ztvLC57L3eDmuhCTp32MSZ9Mw%2bTpH2PYGx/h3RkfY/Knn2DsB654%2be/LYUobEYa%2bA8FxMoQRf/xFMgx/F8KwSf89Rr7XFX76MDDu0QPmzoDnl/MQEOCDqNV%2bCPVbip1bNuOHsDAc2/cdEmI3IO74j9i5fy2OHzuEhPg4xJ84hmNHjyI%2bLg5x1I47QfL4ccQfP4YfDhzCwaNH8P2eXYjZHYtTpw5j77692L3vMMfXW3dh/fbvsXbLLkR88y3JWHy1MQbhG7YjOmYvNsX%2biM27/jNsjN2H2H1H8M5nHkTsH7kndFm/Rw%2bY8xlWLF8Cf18PRAR7IizQDUe3b0O%2bry8S92xG0Qk3HDq0FVuSPHH4%2bAGcPJmA%2bJMncfLUKWo/JQkJCaeQmJiI2JjtCF8dgQ3Rm7AxOhpfr1uDHTEx2LxxAzZ9E43NmzZhO31n3ZpIRH%2b9DuvWrUPM9q1IOpuIc4mnkZR45lcj8fQpXE0%2bj1lL/LmXmbr0nQeELz6fgRWUAP183BDuvxhBy%2bZyBXLy8pCWno7MrHRkZGQgOysTaalpSE1NRUpKCseVK1dw%2bfLlJ3DpEsMlXL16lfeTk5N5n0n9%2b%2bRk6tPYlStXtfPZb2kt1mfywoWLz4gLOJ90npDE2xcu/oS83BzMcQ%2bGMPh1Hm59EsBCwMt9KXw8v8Rqr3nwcv0ct27dRmNjAyqrqlFf34CKigpUUbuhoQF1dXW4d%2b8eR01NDb2v7xXsN4aypzk1NbX0zUZOUlpaGjIzMznxvYHNyb5%2bAzkFhUindm5uLvDzY3iu/gaC/e8hehYCXOdMJw9YAm%2bPxQhZNgvuCz5DYWEh8nOzKHYPIj7%2bFC5fSsau2J04mXAahw8fRll5JSeitbUVz%2bt59OgRkVzFvernn39%2bth/RvOacTNzdFo3y2G2oJWN1tLfBfdV6CHaMgA%2beIKA7CF/O/jv8vN3JC8j9F83AsvkzUUAEcA%2borORWZhZi7Wpqsz5TnoFZT%2b8N/y2ampr42ix0Hjx4gMdECCPl8ePHYHQ8JmUfPnyIDprXVlGOluJi3Ar1R%2bqkV3BpoiPyg7xR3diEzvZWeIZFQ3B4DdLxU/jR2xuEWR9NwmLXeVgwbyYWTf8z5s2YhpsFBXxTehdlynbnwnoingfYerW1tZwApqj%2beUhkdDQ1or26Gq3FRWi7W4qOuloUrQlD%2buTfI%2bODt5D6%2bgTc3r4RNa1teEAELA5cA8FiHOWBt4gIhrd7RtzRgzhD2fPUyRM48MNuxGzbgmJil8Uj21BPm9XL5wm9Bzwiq9eWluIOhUMb7eFBawseNDdzb2BPGbl7%2bvtvImvqZE5Ayh/Go%2bTgD6hvv49mIuvHI3FYHrwW4Vv2IOrb/VgTcwBRhDXdQKjTMV9ZWUWWL%2bTZ9O7du9wl9UnPUHFD5Z%2b3B%2bgJeEiuf51Oics7YlAYdxwPO%2b5rQ54pv5OUf%2b9NFJLL3yWrp739Ox4GFUln0EgENNBaOdlZyM3KQF11JVrvNaCtualHCCxzMmRlZeHixYt05h9CKbHPSCkrK%2behwIhghLCNdmV%2bapeXl/Pc8DygX4sdr53k9oyAgvNJyNi6ETditqK9sgLl38ci62/v405EMCej6sBepLw2Dmnvv47anCw0trSiiTz37Llz2LV7NxJOU31wno5Jdlz2AKGsvIwULUNJSTEn4hQVMswDSqn/4759VMnF4%2bjxEzhCld/%2bg4dwOSUVzeSOjIjneQqwuK%2bmONcTcI3O9kY6fhvv3EZWZCjyArxxbcHnqKAKUx8KxesjefynT5mEprK7aGDJlAhgdcyOHTtwMj6et8%2bePdsjhPCwCLr1RWL16nD4%2bfrD030FPwaZ5cuJmKKiIk4II6iUEhCzlGFibGlp4YQw%2bXS7uzF9%2b2nJvqcnoKOzkwg4hyayOnuqU67g%2bqpAVB7ejw7yzMePtEnyNt1KU/8wAZkzp6CNJW3dfnZ/9x3mzJ2HFV4%2b8PH1g4%2bff48QzAeLIe5vAsFIgJG5ABtHK%2bRey%2bUbY/mBuT5LiHro84KeBBYqtVz%2bh9CtoQ8vRsD9%2b/dxjdy/gWV8Uowdh530beb2HTXVaL5xnfdv0KUs9bXxyFk0Bx0dnXydB0Tel0vdIAjCs8FyiAYqSxUslErI1XIMdx6Ca3nX0HyP3Ly2pu8ExojoCXVPoYd5hqdASmoK2tvbkUO1fXNVZbfhwmqE1tu3kDt3Og%2bB/AAPMJ%2bopd93EgHLyYuZcsYmMgj9zGBkKkU/kQ6mWhgZ07iJGQQrRzU0g1RQ26qgsJNjxIQhlAuu8fhmCuqt/jTYhhsbqIyt7x319XUcvc8hT6PCi1mQeQAj4PrVKyi5eROVd%2b6gikKy9tYtNFD7HoXifVqvjQjI%2b/RDpL06BgVUE7CsUFNdhU7yBN9QHxhpjKAcqoJsoAUsBisg6S%2bHqYUUcnsLmFmZQzlcCam1OQTrkRqo7ZSwctTAzMIM9g72yM3J5WUpi31WEzDJEiWTerCN59%2bpQHpBBTILe0bOnWqOzMLKHudkMFlQjgq6b6QSASwhPiDwMCSrltEe7uTn4wZdxHIvnEfm6QSk7PkePy2Zj4tT3kURXdvZU0N7Zh7gFegNwUyAYrCKK8sgUso4AaxtLJNCZmvBSRFk5jKyvgIDBquhHmwBx7FDkZKWwhVmsZhOl44jhw8ikTJmNcUs29Sd27dxq6Qcl3KLKEdQ8qEStMEA9Q2NaKIQysnJQULiOTpBjtGaGWimY4q9e3puSwvNLSxH5o0SpFHCY0rwEtjgTsBaj6jfwYhpa0MdeeFdOiWKyCtaKE%2bwUrm6uobK6E64uXlo45vcXxDEWvTTQd8WRJT3SErMxJCrpFBYyiG3kmDIKHtkZ2frMn8JPxGYW%2baRBYqLS/gYOxlYAssuLEN%2bURVulFQ/gevF1bhZWoPM68U4n5qLpCvZyC4opXc1/N0T89lcGmceUFpehQIqw3li1KFGd/9g7TpdsqzvCs36rqTM4p/dWh8%2bfEA5wFObA8RSCCaS3qG0lVIIyCA2MYXSgUJgiA3yrufxY8nwMsQ%2bwo4pBu0RqI3dyqoaVFZ3D%2bYxdfWNZK1GukjV9TiPrcHiv5HlFvYdSn7MnVlM8yRJ49W0F6Ykm1dPyrM%2b9yZWsRLYWC3NNSSAJT3BmCkq7pkAc7UZFASZWAyZhSmGjbYna1/Txl8Pdb/hKdBXcqvXWay%2bj2TJ16KQKCu8idSjh3AtORn5yT8h72ISbmXnIDcpERnxx5EZH4frVy4j/%2bI5ZJ05TeNnkX0mAVcP7sfNjHReRrstd392AjT2csikEtiMUMJcJcKwkXZUS%2bfgXrP2Dw9%2bzvOzXut%2bTOr7Xe3nBGbtKiq07lKGL6MwK6fbH2uXUxKsIveuoBK9pOAmjd2m97epXYDSwgKUUF3AToxSGmePu8eKZydAaS2jGkDKCVDZSmBnY40CWqzjficdTfd%2bqeiaqWprauZS3%2b9qP4VWur21thhA13/63RO/0UtKcG2UfNvoKGRo17X5uK7fft/gHet3dHDJ5rDHbbnHryNggIMFEaCA5WA5%2btuY47dvjMUrb0/Ey29MwO/enIBx45zx0qvj8Oo7E3l/4stjMZH6L746HuMmuMDFyQkuzs4cTk7OGOMyFmOoPWqME0bRu1HOY7SSMNplDMdI3qe5zi5wdnHm850Io51cCM4cTvRuDK3hRBg5muaP0c534mPa9UeOHmMA6tO4eoA1ZXhTrYJ95gCVGfrbmaM/hYLaSkZVoRTGxpRBJVr0M9GWjDJLE8isjKmKopKZsUvS2MyIPtCP3hvpIPyfoJ9WaWMdes0Bg8xh8xslWd8cA6gtpWRoPVQBa6qUBo5WY%2bAoNRQWMiiokBhgrxv/jQYaR0uqqqxhbG4JU4UVlCMGQmGjhlRKhA5XQTOMymuqwkzE1Ke2tZMGikEKWFDNoRmuhsqB5tA88wHmMKWS1JjmmUqkEEmoYBFrpQlJ/Rhri2iO2EwLNsdYxMpcCRnD7AkYccvrlRb3fgwOGGYBq%2bHk/kMtoNBIIRWJyRPkvG8zUkVSAZnEjIgxg5Iqp/62Sti/YENF00CYqKwgiDVUWWmIDEtYWCsgNhXDnIiS21lAbmkBsVQKDbUVg5WQqOSQqqkMdVASOQoigeZp6AiWSCAyY6AanRTostyzwKQ7GLh%2bXyFg9QJZxNacIKdyWMnJsBqqHZMQu2prImiIErajNOQhSgxxtoXj%2bEFwGGUHpaMdzChpCmI1BJEKIrpkmJqKn6i%2buDW6q8aMJLwSMyIlmBW1lpQYbP4ZYdwdxL8ob9yHB8gpB6is5VBaUkk8kKwzQEZuruDSjKyuptrZepiSEiWVy9YaDHUeBMeXHDBsrD3UQ20hGmBJC%2bkIEMkpf4if/KhxN5s1dM1fY23DtbuU7MYjnnD/PgjQUOxr7MnaIhHdCcyhspLzEFDbUBiQ4tYjVJBTXCvJdR1G2WLQCFs4vGCHgQNtiDgbSAZaw3wIYbAV7EZTHrBUwlRKMUvx2U8sokQpghGFVT%2bxmPcZjJgUkcVpjglJUxYCEpYDtLGujX0Zzx9iNs9EwkODj7H55Ckm/IgTP7un9IB/Ax%2bqoQ4KMLHTAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"680\" alt=\"Gmail Notifier OSX App\" data-srcset=\"/assets/static/mailbox-app.af46554.ff255191c1def0d9539ec1210187ed94.png 680w\" data-sizes=\"(max-width: 680px) 100vw, 680px\" data-src=\"/assets/static/mailbox-app.af46554.ff255191c1def0d9539ec1210187ed94.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/mailbox-app.af46554.ff255191c1def0d9539ec1210187ed94.png\" width=\"680\" alt=\"Gmail Notifier OSX App\"></noscript></p>\n<p>The OSX application was written in Python 2 using <a href=\"https://python.readthedocs.io/en/v2.7.2/library/tkinter.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Tkinter</a> for the GUI and <a href=\"https://docs.python.org/2/library/imaplib.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">imaplib</a> to establish a connection with the Google's servers. It uses <a href=\"https://pypi.org/project/pyserial/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PySerial</a> to communicate with the Arduino over a serial channel.</p>\n<h4 id=\"python\"><a href=\"#python\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Python:</h4>\n<pre class=\"language-python\"><code class=\"language-python\">conn <span class=\"token operator\">=</span> imaplib<span class=\"token punctuation\">.</span>IMAP4_SSL<span class=\"token punctuation\">(</span><span class=\"token string\">\"imap.gmail.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">993</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\nconn<span class=\"token punctuation\">.</span>login<span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>password<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsetup<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nsend_username <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\">\"</span>\nser<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>send_username<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p>It sends a <code class=\"language-text\">&gt;</code> character as a termination identifier, that the Arduino looks for to identify the user's email address.</p>\n<h4 id=\"arduino\"><a href=\"#arduino\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Arduino:</h4>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>Serial<span class=\"token punctuation\">.</span><span class=\"token function\">available</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> Serial<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token string\">','</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token string\">'>'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    user <span class=\"token operator\">=</span> readString<span class=\"token punctuation\">;</span>\n    readString <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    Serial<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  readString <span class=\"token operator\">+=</span> c<span class=\"token punctuation\">;</span>   \n\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Using a 10ms delay, the Arduino reads each 8-bit <code class=\"language-text\">char</code> coming over the serial connection and concatenates them onto a <code class=\"language-text\">Arduino::String</code> until it reads a <code class=\"language-text\">,</code> or a <code class=\"language-text\">&gt;</code>.  (<strong>It would have been better to use a null-terminating character here</strong>, and this is one of the places where my then lack of programing experience shows).</p>\n<p>The Python application is polling Gmail every three seconds and updating the microcontroller via serial:</p>\n<h4 id=\"python-1\"><a href=\"#python-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Python:</h4>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">if</span> previous_unread_count <span class=\"token operator\">&lt;</span> unread_count <span class=\"token keyword\">and</span> previous_unread_count <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n    ser<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"One more,\"</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> unread_count <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n    ser<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"{},\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>unread_count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    ser<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string\">\"No,\"</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p>Here the code will send the string <code class=\"language-text\">One more</code> if a new email has arrived since starting the Python application. It will also either send the total number of unread messages as a string or <code class=\"language-text\">No</code> if the inbox is empty.</p>\n<h4 id=\"arduino-1\"><a href=\"#arduino-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Arduino:</h4>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// ints to represent the servo angle</span>\n<span class=\"token comment\">// for 'up' and 'down' flag positions</span>\n<span class=\"token keyword\">int</span> up <span class=\"token operator\">=</span> <span class=\"token number\">95</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> down <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>Serial<span class=\"token punctuation\">.</span><span class=\"token function\">available</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n  <span class=\"token comment\">// No messages, flag is down</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>readString <span class=\"token operator\">==</span> <span class=\"token string\">\"No\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    flag<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>down<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    line1 <span class=\"token operator\">=</span> user <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span><span class=\"token punctuation\">;</span>\n    line2 <span class=\"token operator\">=</span> readString <span class=\"token operator\">+</span> <span class=\"token string\">\" new messages.\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// A new message since login, flag down and back up</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>readString <span class=\"token operator\">==</span> <span class=\"token string\">\"One more\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    flag<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>down<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">700</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    flag<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>up<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// Inbox has messages on login</span>\n  <span class=\"token keyword\">else</span>\n  <span class=\"token punctuation\">{</span>\n    flag<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>up<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    line1 <span class=\"token operator\">=</span> user <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span><span class=\"token punctuation\">;</span>\n    line2 <span class=\"token operator\">=</span> readString <span class=\"token operator\">+</span> <span class=\"token string\">\" new messages!\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Write the Arduino::String values to the lcd screen.</span>\n  lcd<span class=\"token punctuation\">.</span><span class=\"token function\">setCursor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  lcd<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>line1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  lcd<span class=\"token punctuation\">.</span><span class=\"token function\">setCursor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  lcd<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>line2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>The Arduino receives the char commands over the serial port, adjusts the flag's position, and writes user information to the LCD display.</p>\n<h5 id=\"the-full-project-source-is-available-on-github\"><a href=\"#the-full-project-source-is-available-on-github\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>The full project source is available on <a href=\"https://github.com/p-gonzo/physical-gmail-notifier\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Github</a>.</h5>\n","cover_image":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/gmail-notifier-cover.07cc2b7.e443d2a3678d771172c22d0e5ed623bb.jpeg","size":{"width":860,"height":622},"sizes":"(max-width: 860px) 100vw, 860px","srcset":["/assets/static/gmail-notifier-cover.a67b0b2.e443d2a3678d771172c22d0e5ed623bb.jpeg 480w","/assets/static/gmail-notifier-cover.07cc2b7.e443d2a3678d771172c22d0e5ed623bb.jpeg 860w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 860 622' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-0766e3dc110b33824d1963eb89ae7e74'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-0766e3dc110b33824d1963eb89ae7e74)' width='860' height='622' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAuAEADASIAAhEBAxEB/8QAGgAAAgMBAQAAAAAAAAAAAAAABgcDBAUBAv/EAC8QAAICAQMDAgMIAwEAAAAAAAECAwQRAAUhEhMxBlFBYXEHFBUigaHB0VKRorH/xAAaAQACAwEBAAAAAAAAAAAAAAADBAIFBgEH/8QALBEAAgEDAgMHBAMAAAAAAAAAAQIDAAQRITEFE0EGIjJRgZGxJGGhwdHw8f/aAAwDAQACEQMRAD8ASx2TdXPSm2XnPstdzj64HGqryzVSI5IyjocfmGCCPgR8tGckvqGvaNjbadqgWcTIlYSnoI8ec%2b/x1n3o9/uXJLE9G4ssjF2cQPyx5J8cZOjvEPKpRTtnQ4ocirW7gc167ydC9b4XwPfVCQKcFSufkNMv0zBvE0qXLk7GIRmKMTEuSucgge2ffVPd/RUrySzU7hZmPV0Sj3%2bekjMoYgVok4HczWyzKpydxpt0IoLhnChlWV/AJy550V3dtG0BbFC5aijMKS468jBA/vWVHtNupYEssUvfXqB6UR1xjjAP66MNzat%2bE7fJchuulimURK4XKuBhc5%2bHUBnHw1wgOdDQ7e3McUonQ5A0067f7WftW9bu4Y1dzLhMZ7nS2P20cem9zv2LsEN2SvIkivgpF0sCoz74/bStoi/RnTs1nKMgVi0HSRyeOPP10c%2bn9zUbnRDwzRqJeSRxyCP50tPEBsKrkYmmjuH217rBkQ7dQJH%2bRc/zoZ3P7Xt/3zNB4aUEVgGJ2iDhgpHOCW4OM6VFPeLG9XIa9WJBJO4RDI%2bBknA1a7Nza/WCbbd7HfhsGKTtsWGRkHnV5IqhCVHSq%2bwXmXUaSagsM%2b9Gq4wAAAB4A1Kx6hz7Y1XnkNaWRGAYo3SSM/1qOW/2kdzXnYJjIRCTqC9nr/fl/kfzXpCdr%2bDSeGcezD5FebtBpkMsaZK%2bf2/sasbxBE/o/Z5AMTJJLGfoGJB/61s7BVi3XYt5uwse1WriTpkTBb84GPPB0E39yMNQVlUGNJHkUnk5bzpC5tmgLK4w21GkuEvu/Dqowc%2beRkfIoQ33c79W/LCLz9IwRyOARnGrHoqa/ufqfbIPvE8iNYTrxyAoOTn5cai3/cFG3sghh77WOvuNEucNEBjqJzj44xrZ9GeqbNSrTqpJHEw4ygGDz8vOuSDEYwNxWBnP1Dr5E/NLbYNxlrbjWYhZVR1wkjlV8%2bMjkDRLuG5Kv2hLNZapXhWwC4rys8S59mbkjnydBNfKkHCnHvrX3O2Nw3drLwxxq7KTGgwPA/rTme4RSluxjnRxuCPmmvHQ2a4S0XZlY/mJinOTn48Nqf8AA6fwNtfpZf8Ak6UpvQQuezX6WPxU9P8A5r3JvV2MBYrM6BhyBIdQS4uE8LkeprYvxHhe01shP2UfsfunNHdTYtku145pY60sRRyz%2beQR1E/DOlluu%2b/epmTbkaUeO4VOP0Hk6xfxW7PXFeazLJBkHoduoZ/XWhQuMpHJ/wB6WuJGYl31NDbiqSDl2qctdM%2bgxgdAMf0Vy3Q3Xc4%2bn7qFUsr92XCHhcY%2bmu09lt05Y5JLSZQ5Cpk/vrbhsu6jk6q2Lg7vaVSX88nA0mbiV%2b7Ve9pCCZGySa//2Q==' /%3e%3c/svg%3e"}}},"context":{}}