{"hash":"7f455b72bd5620634c07c0c634dcc46785c41ba9","data":{"tag":{"title":"Flask","belongsTo":{"edges":[{"node":{"title":"ðŸŽ‰ A new blog for a new year","path":"/blog/posts/a-new-blog-for-a-new-year/","date":"1. January 2020","timeToRead":9,"description":"As part of my pending New Years resolutions, I decided that I wanted to do more technical writing.  So, as a means to an end, I created a lightweight blog and accompanying content management system (CMS).","content":"<p><strong>UPDATE (1/12/20)</strong>: This blog no longer runs as described below.  Though it was fun rolling a custom CMS from scratch, I have since migrated to the static site generator <a href=\"https://gridsome.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Gridsome</a> and Github Pages for hosting.  Credit goes to <a href=\"https://brianschiller.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Brian Schiller</a> for shaming me out of paying for hosting costs and sharing Gridsome with me.  The source code for this project is still publicly available on <a href=\"https://github.com/p-gonzo/flask-cms-blog\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Github</a>.</p>\n<p>As part of my pending New Years resolutions, I decided that I wanted to do more technical writing.  So, as a means to an end, I created a lightweight blog and accompanying content management system (CMS).</p>\n<p>Though I had used other blogging CMS platforms in the past, namely <em>Wordpress</em> and <em>Medium</em>, I wasn't satisfied with their <a href=\"https://en.wikipedia.org/wiki/Closed_platform\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">walled-garden</a> approach to content management. I wanted the flexibility of having complete ownership of my content and platform, so that if I ever wanted to take my posts elsewhere, a simple database migration would suffice.  I also am very particular about what I want and and don't want in a user-interface.  So given these considerations, developing a simple blogging platform from scratch was the way to go.</p>\n<h2 id=\"requirements\"><a href=\"#requirements\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Requirements:</h2>\n<h3 id=\"my-three-main-requirements-were\"><a href=\"#my-three-main-requirements-were\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>My three main requirements were:</h3>\n<ol>\n<li>Keep it <strong>simple</strong>.  I didn't want my \"lightweight\" idea to turn into a massive project into itself, after all, the nexus of this plan was still a means to an end.  I wanted something quick to develop and easy to maintain.</li>\n<li>Write and store my posts in <strong>Markdown</strong>.  No messy HTML, templates, components, or anything else. </li>\n<li>Keep <strong>costs low</strong>.  Though I'm willing to spend some money for hosting, below $10 a month is the goal.</li>\n</ol>\n<h3 id=\"additionally-i-wanted\"><a href=\"#additionally-i-wanted\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Additionally, I wanted:</h3>\n<ul>\n<li>Image uploading.  I want to be able to \"add an Image\" on the fly to my posts without using an external service like <em>Imgur</em>.</li>\n<li>Built-in <code class=\"language-text\">syntax highlighting</code>.  This was going to to be a technical blog after all.</li>\n<li>The ability to drop into HTML when necessary.  Though I originally said that I don't want the \"messiness\" of HTML, I want to be able to use it directly in my markdown when aboslutely needed.</li>\n</ul>\n<h2 id=\"considerations\"><a href=\"#considerations\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Considerations:</h2>\n<p>Given that I was going to create my own CMS, I wanted the stack to be something that I enjoyed working in.  My original thought was to use <strong>Node.js</strong>, to connect to <strong>PostgreSQL</strong> and serve a <strong>React/Vue</strong> front-end.  Though I quickly pivoted from this idea after reminding myself of the lackluster ORM support in JavaScript.  Okay, what language has my favorite ORM?  Why Python's <a href=\"https://www.sqlalchemy.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SQLAlchemy</a> of course!</p>\n<p>Okay, so my back-end is going to be Python, so I'll still serve up that <strong>React/Vue</strong> app from Flask server.  Though switching the back-end to Python got me thinking, do I really want the blog to be a single page application (SPA)?  In my experience SPAs can be notoriously slow in comparison to small server-side rendered templates.  And given that my application was going to be a blog, <em>I really didn't need</em> most of the overhead of what a \"web application\" provides.  Users need to be able to read my posts, I need to be able to upload my content.  Seems like a good candidate for good old-fashioned <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Forms/Your_first_form#The_%3Clabel%3E_%3Cinput%3E_and_%3Ctextarea%3E_elements\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">web forms</a> to me.  And as an added bonus, I don't need to create a modern API, I just need to handle a few simple <strong>GET</strong> and <strong>POST</strong> requests.  Score!</p>\n<p>To recap, the app will run a <strong>Flask</strong> server and a <strong>PostgreSQL</strong> back-end.  I <em>wont</em> be using any modern JavaScript frameworks, any JavaScript that I need will be vanilla ES6 or something more old-school like <strong>JQuery</strong>.  As for styling and responsiveness, I'm a big fan of custom CSS Flexbox, so I'll be using that.  </p>\n<h2 id=\"implementation\"><a href=\"#implementation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Implementation:</h2>\n<h3 id=\"not-starting-from-scratch\"><a href=\"#not-starting-from-scratch\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Not starting from scratch:</h3>\n<p>To begin, I took to a bit of searching to see if someone had already made a similar tool.  Why reinvent the wheel?  Low and behold, I came across an <a href=\"https://github.com/coleifer/peewee/tree/master/examples/blog\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">example blog repository</a> from the makers of the <a href=\"http://docs.peewee-orm.com/en/latest/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">peewee</a> ORM.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1862 1618' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-be895f26d95ca2b68c14479a4d2df08a'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-be895f26d95ca2b68c14479a4d2df08a)' width='1862' height='1618' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAA4CAYAAABNGP5yAAAACXBIWXMAAAsSAAALEgHS3X78AAAJuUlEQVRo3uWaWWyUVRTH%2b0wCISyRfd8fSlhe6hs8sCRACLyAmpjokxqisUpi4gMUCpogUYkJgsqDJSXGBI0LQqyASIgsZWmhe6GldIG2lEJZC8f7u5n/5GMyW2EGZnCSk3u/c8/dzn7v3JwJEybY%2bPHjjXLcuHE2cuRIGzVqlP8GxowZY6NHj7axY8c%2bRgcNAB5QnXZKxqEfePVTGQ8mTpzo%2b82ZM8dOnz5tLS0tdvnyZWtqavJlY2Nj0tDQ0OCBvvPmzbMRI0b48YPz5UyePNlXZs%2bebWvWrLHly5fbwoUL/WJnzZrlv1euXGkLFiwwaKdNm%2bbrS5cutWXLltmiRYs8LFmyxI9Bv7y8PN/OpOBzc3P9xPRPBFOmTPEMZozr16/b/fv3raury7q7u%2b327dv2pL/Fixd7YUydOvWx%2bXIGDx5sgwYNsuHDh/sNz50718PAgQM9jg3TadKkSTZ06FAbMmSI38z06dNtxowZHg/wjeToxwZmzpzp%2b0IzbNgwPwdzJQLGHzBggO/b3NxsDx48sBs3btjNmzc9Ax4%2bfGi9vb19An4wtF%2b/fn4PwflyNm3aZJs3b7bCwkJbt26drV%2b/3oNwBQUFHjZs2GDQAtSDeH1v3LjR96NkDNEwDnj1jwead%2bvWrd4EqqurraqqykNlZaVVVFT0Gei3bds2v87IdeRYBv%2bQNhqQCoj1y%2bmrOj1LSDUzo82R8%2bjRI/s/g2cAvyASbiU7QCStxsqWX06qF5xNm/cM0IJxFKWlpT6B6OzstI6ODrt165ZPIgC%2bicmEI%2brApUuXfNu1a9d8f7Qh6zRAi71y5YodO3bMZ1779u2z4uJiO3z4sO3cudMOHjxoRUVFPhPbu3evB2iA/fv3%2b3BFXd42KxmA9M6ePWs1NTV29epVKysrs3PnznmtIBZTkogQV6FpbW31ZW1trdeCo0ePhsfJVIcXTTgp8QF37twJq38m/6Lt87EokCgux4qlknwmQ0wNiBYGI8NcUK3j0Sajgs9T6lE1IFZDrAUrtYzkrjREWhJZpySKPGtgrffu3YsZoWJqAD%2bcHqEOpygPT4nNczwlJBIqCYk9PT3%2b2AqOdr51hBUuqFHPUvVhhEw1qhOMJX02R4g7dOiQtbe3h22djdXX19uFCxd8JKAkYhAhwJNLEB3Ky8s9A0%2bdOuWPts8rREoLEzIgkb2Im9FCnSYJpseRzhHteR6HqrgmkMhpRDqwYCQIHjf1Ha0tSPO8IG4eELl5NomkI4%2bTtMNN2u7evRvWBvkF6uCDmw1qQCzGpBNYI1ku606aAWzmxIkTVlJSYkeOHPHpLg5ONNzVcUPDhaP8APZ%2b/vz5cKZI2kwGiW/AD5w8eTLsB551GCTDxSknxQARIEkYgRenczDc0dbW1uaZQgTg8ASQHlPSDsc1BkAkQBpBH5FM2vw0qbX2xGFNGt0nHxDtVgXgkhKuImXd0yF16qhbpqW/rDfWQS2mBsTiJhqAVhAWGZgcAalTwmm0Ak3QfT54Dktq1/EZOkwCTYKWPuAJvTBRY2BmlNABmB9taqdkbABthIa1Bb0%2bcyWtAfHyAqkkJkGsv3jxot8kC2bx4LB3Fk0bgB%2bABhyLB6f7BXKF4B8YtLHY4B8baJYYAcPoB53owTEeJQA9fYOJT8oYIBMgEWLx2iwTskm%2bwcMQaMAzOd9Ipa6uLnyJAiAt2gASKNHSxkZES4l5UUJHHbzWAIOgl6OOXHtKNUCJBYtHGkheTpBNUrIJnJ7aKGEIaioVZVGUul2iDZpOpyVtrt7sNiXzknT5ljagTTIpmYQ8feTpLy0aQBhEBZEGIRAJ4AzBwwBwhEgkhpSoIzFSa6XPtDEGtBqvoqzMzvz7r11w5dOc/tLCAGkAg%2bmgEzwEAdSFx6EFwyB9kLq%2bCZPgAE/rvm87qd51Ur3ppN37hIefSMedUgZEZoiZfgOUliggB6fkR6EIO0XCwbo8O05SoQ47xu6vYM9O2tBhNpgKNPITjI%2b9058%2b4NAczcl3uxunmfldvYlxnW%2b4GkrO0mYCqDgblG0rDissKU0GR50N4awIidh7tfMBDS4itLq%2bdS7lvuxo8QeAooCcLLjgmOCp17ixGKfDbb7in3/sUmmplf/9t9W7lLv2%2bHHrdHOnjQHYrhIUSpwbC2Xh4HqcPSsRUuxmYzg/6GhrZNMwB7zbTEvI66NZhEvlGPTnm3ni/l/IGoOQThO4RSLkNtvtNtrtVJKFtjjJtLoNdDnz6HFOro0Q5Rbf6SYHp2QFRlBecypLuCPsKcTJdJQtymykQU/yh2l6wqBLgcuc6ta480CDk2odKu3CYaOTaJlTv6ozZ6zShbtaF8rA1btTYq2TMqdFtAVNECiJ0f/4Sq6QOnjq4GGGki3wjIVJ6UQKDf9lMA5tmIk2nXITIIx1OBVtcZO1ubLVSa3VTdjh1JsSaOFg5BbWjq277yacZih5wUEhVSVGTSFHCJ4Eh7reBYGjBK/kCaAfbeA0FmYjRwteB6C0OMFat9kKJ4lqJ9HzODM3eS25v9twJfcDjjllDn%2bRM0Po3KBTo2y8OqQVZ5zGKLdHkrSjKUhUeb80Azz9kDrmBD00nE6VbDFH8A6TQ1vKU2FCIZy%2bHpLaDcdl6kxGW5fD8d3qVJw6iZGkTD8lTToBqk3pNW1KshhTEhcNwLw%2bfQ7hoQMPLpgUMXZKfQCLwpvLFuWsJA08uW6HAHlxHwKd9GTHsle%2bsVnqGlMhkZI%2baIkORUhb/10yN1KnLj8AXfAOgzURuVKiAUhfl4y642MSJCqb0/1ftHuGyIvV4H8FwUij8aPdR%2biqO3jnGHmDFLwTJLI8FQP68vghk/4JTurP0b7k1N6jOjvD1rBPHYDQCt35ZRITkv57vC8MUDzG3ngzgG1ik9h3UM2y5d1Qyk0g294NJa0BD0Ob%2bP3IcSvY/r19%2bt0e2/RNsRXu2G2fFe21L3d8a6%2b9%2boqtXr3aVq1a5csVK1bYrl27wk4ruxkQ8tLbf/jFXv1os%2bVv%2bdre37LdPvzsa3tj/ef25rsf2Lgxoy0v72X/Lnf%2b/Pn%2brfHatWszmwHJPnoQA77a87OtzC%2bwtzZ%2b4eFtB699vMVef%2bc9e2noEMvNnekfSvPcvX///pafnx/%2bWz2r3wiJ5kR5lRX9%2bqft%2beOgFe/7y3b/VmI/lhy1n377wz7hoXRhoX8szYNnHkwfOHAgHPsz/o1QYi14MmeWKS/HEr4QifUYKvE/vL3hrCvaE5WMfiTVVxPI5l9cEyCT4yCh2xkOFBwiOIxwWsvkDC8lJqAHUZzcdCurCwsuQF4ULUj6mdyLaAIJ84B43vpFZcJ/AJjJ/w0BbrUAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"1862\" alt=\"Original blog from peewee examples\" data-srcset=\"/assets/static/original-blog.82a2fbd.4669589559a0bb86c58780d2d0fba904.png 480w, /assets/static/original-blog.cbab2cf.4669589559a0bb86c58780d2d0fba904.png 1024w, /assets/static/original-blog.df90ef8.4669589559a0bb86c58780d2d0fba904.png 1862w\" data-sizes=\"(max-width: 1862px) 100vw, 1862px\" data-src=\"/assets/static/original-blog.df90ef8.4669589559a0bb86c58780d2d0fba904.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/original-blog.df90ef8.4669589559a0bb86c58780d2d0fba904.png\" width=\"1862\" alt=\"Original blog from peewee examples\"></noscript></p>\n<h4 id=\"for-my-needs-it-had-a-lot-going-for-it\"><a href=\"#for-my-needs-it-had-a-lot-going-for-it\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>For my needs, it had a lot going for it:</h4>\n<ol>\n<li>A fully-functional CMS blogging implementation <strong>using Markdown</strong></li>\n<li>Handles <strong>user sessions</strong></li>\n<li>Converts Markdown to HTML with gorgeous <strong>syntax highlighting</strong></li>\n<li>A <strong>tiny</strong>, bare-bones implementation, with lots of room for customization</li>\n</ol>\n<h4 id=\"but-it-also-had-a-couple-of-strings-attached\"><a href=\"#but-it-also-had-a-couple-of-strings-attached\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>But it also had a couple of strings attached:</h4>\n<ol>\n<li>Not using SQLAlchemy or Postgres <code class=\"language-text\">Â¯\\_(ãƒ„)_/Â¯</code></li>\n<li>Using <strong>Bootstrap</strong> (<em>boo</em>)</li>\n</ol>\n<h3 id=\"adding-a-proper-user-table\"><a href=\"#adding-a-proper-user-table\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Adding a proper User table:</h3>\n<p>Originally, there was a hard-coded admin user being validated like so:</p>\n<pre class=\"language-python\"><code class=\"language-python\">ADMIN_PASSWORD <span class=\"token operator\">=</span> <span class=\"token string\">'secret'</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">if</span> password <span class=\"token operator\">==</span> app<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">[</span><span class=\"token string\">'ADMIN_PASSWORD'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n\tsession<span class=\"token punctuation\">[</span><span class=\"token string\">'logged_in'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\tsession<span class=\"token punctuation\">.</span>permanent <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>  <span class=\"token comment\"># Use cookie to store session.</span></code></pre>\n<p>Even for a simple blog like this one, plaintext passwords make me a bit squeamish.  So after swapping out peewee and sqlite3 for SQLAlchemy and Postgres, I implemented a User class, with proper password salting and hashing:</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">from</span> werkzeug<span class=\"token punctuation\">.</span>security <span class=\"token keyword\">import</span> generate_password_hash<span class=\"token punctuation\">,</span> check_password_hash\n<span class=\"token keyword\">from</span> sqlalchemy<span class=\"token punctuation\">.</span>orm<span class=\"token punctuation\">.</span>exc <span class=\"token keyword\">import</span> NoResultFound\n<span class=\"token keyword\">from</span> main <span class=\"token keyword\">import</span> db\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>Integer<span class=\"token punctuation\">,</span> primary_key<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    username <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">(</span><span class=\"token number\">150</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> unique<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    password_hash <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span>Column<span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>username <span class=\"token operator\">=</span> username<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>set_password<span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">def</span> <span class=\"token function\">set_password</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>password_hash <span class=\"token operator\">=</span> generate_password_hash<span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">check_password</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> check_password_hash<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>password_hash<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span>\n\n    @<span class=\"token builtin\">classmethod</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>cls<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> User<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span><span class=\"token builtin\">filter</span><span class=\"token punctuation\">(</span>User<span class=\"token punctuation\">.</span>username <span class=\"token operator\">==</span> username<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>one<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> NoResultFound<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></code></pre>\n<p>Which allows us to log in like so:</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># inside of a request:</span>\nusername <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span>\npassword <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">)</span>\nuser <span class=\"token operator\">=</span> User<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> user <span class=\"token keyword\">and</span> user<span class=\"token punctuation\">.</span>check_password<span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tsession<span class=\"token punctuation\">[</span><span class=\"token string\">'logged_in'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\tsession<span class=\"token punctuation\">[</span><span class=\"token string\">'user_id'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span>\n\tsession<span class=\"token punctuation\">.</span>permanent <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>  <span class=\"token comment\"># Use cookie to store session.</span></code></pre>\n<h3 id=\"adding-a-few-more-tables\"><a href=\"#adding-a-few-more-tables\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Adding a few more tables:</h3>\n<p>After implementing the Post and User tables, I added a few more:</p>\n<ul>\n<li><code class=\"language-text\">Image</code></li>\n<li><code class=\"language-text\">Comment</code></li>\n<li><code class=\"language-text\">Tag</code></li>\n<li><code class=\"language-text\">PostTag</code> (Tags and Posts have a many-to-many relationship)</li>\n</ul>\n<h2 id=\"using-a-beautiful-markdown-editor\"><a href=\"#using-a-beautiful-markdown-editor\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Using a beautiful Markdown editor:</h2>\n<p>The original codebase was using a simple  <code class=\"language-text\">&lt;textarea/&gt;</code> for editing content.  My original thought was to add in an <a href=\"https://ace.c9.io/kitchen-sink.html?doc=Markdown\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AceEditor</a> instance to provide some Markdown syntax highlighting, that was until I stumbled across the glory that is  <a href=\"https://simplemde.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SimpleMDE Markdown Editor</a>.</p>\n<p>The editor, which supports HTML previewing <em>as you type</em> in addition to a number of other useful features looks like this in it's most basic form:</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 2172 1178' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-ddbd1df6f09225d2a8747dbe3d776661'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-ddbd1df6f09225d2a8747dbe3d776661)' width='2172' height='1178' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAjCAYAAAAkCQwqAAAACXBIWXMAAAsSAAALEgHS3X78AAAH70lEQVRo3uWZ2U9USxCH52/22e3FmBhj3NCoUYxK8EUJUUJiojEuoCguoCyyDPswwAwDswED1O2vmN/xMGEZvbky8XbS6aWqq7pr6zp9EpVKxTY3N412bW3NayWMN6uV%2bThOpfITRt2qzm9sbNhGHHdzN14jVvaamJtfsPLauhWKJcss52xhKRMOU7HxiWnL5lYsvZixxUzWYVtbW7aUBSdrUzMpo6TSi5YvFG05t%2bq44CGkkfFJa/SC0hKuqXAwJLK2vu4WQH89AHek9NMKtre3fQ5NA2eMsBDMVpWGW0Xob1ThgjVK1Z529h4EsHuTP01Drdl2tEjzKozjB4%2b7jOY11tpGEAIlk8lYPp%2b3BAMOuF/ZEcLuUi6XI0K/Wg7i9SeK%2bA8NDdni4qIlzp8/b9%2b%2bfbMrV67YwMCAdXZ22q1bt%2bzhw4f28uVLa2trsxs3blhTU5M9ffrU52gZP3nyxAYHB62jo8M%2bf/5sjx49sps3b3rb3d1t7969czqtra12584dp0%2bRCR5VpXz//t0WFhYs0d7eblNTU75xNs1hzp4960JoaWmxN2/eOOzq1auGsI4dO2bj4%2bM%2b19zcbCMjI3bt2jU/7L179%2bzixYt2%2bfJlF9SDBw9csMBPnTplk5OTkQCOSvsSwPz8vK2srOy4wK8UzKbeUigUGsoF4gLAjakJAgGSWF1d9aio64HNoylgCmbS3F5RtTYYxnE1J%2bbxjcTH8fm9%2bvXgHeb7ajmfC%2bDChQt2/fp192daTPbSpUvu45jz8ePH3YSp09PTBwrgsPn4FbQf/LCrsxYeF8hB8NpboFgs7ggAk0b7SCSVSnkw%2b/jxo6XTaffvZDLpPj8zM2PrIU/4W0okgNHRUQ9OXAu0ExMTrmlaDk6U55YA78uXL9bf3%2b8wBEUkJYCq39fX57hE%2b6WlJfv69avj03748MF5fPr0ycbGxpwG%2bKKJsIeHh72FF/ToQwscxuCxFh7Q%2bfHjh8ckYCiIMXsXT%2bbBhx4w6EFL5l8qlSzBAdAyG4LI7OysWwILEAAEaWEKHvhYjNaRUCA4waDBOJvNOi0JFfjc3Jy3bJorCLqsoRKV4cV6rE%2bK0ToqMATL/kSLvcAHesyxH%2bDQooUXLfSBwYtsNxIAjNDg%2b/fv7fXr164FpPfq1St3BSr93t5elyzXIpJFA4yZZwwNrsKenh7XNpKWxrlepVHhQJM14KJlBNzV1eVjtMa6Fy9eOH02%2b5%2b5gOf9wbepRH%2biPX1uB/V1Q4DLQqp//YWqdbRIVNLFzPzLsvqlqFSYuThN0dW1JHxwCFi0%2bg7ZLzD%2bSoqtVD4SgP1PSyQAzBATxNT6gunjVwowmDgugOm%2bffvWTRr3AM48ffDo4z7QwbxxJ9Zi1vi5cMaCu/VW6cnM4YsbQou%2b5hiDA65wcCXcBBi8iBXsFzi84MM8/EWLdfBmnpZ9YU2RAJaXlz1ADIfFBBFMl2BD8FBgJHgAA48gpAhOkCKoMAcMHAW0VKjCZz19aCXD2nQIWAQtgpcCL/tgLcFLgZG14ofLKBACI7DhpsARAmP6wLRvhA9f4AqewHdZwPRcypLTgWggPjuftomwkDnapbCpQvDr1SAU3g14ONkIbSn4MRXYSr7g/bXgt8VS2dt8IM57gfCKRNzQ5lbz0dx68GsCLsEQy5KWuXY5KJrCmoBxALSH0LE0rBY4gZZMFTrACKDAsAbo6Jol8GIVzCPsXZkgTNEK2kRrfv8Hhn4NVq8sFkkzSJU58GfCPJLFFMGdCHORlgI%2b6wYGBp0%2bc1yNc0ELrIWeTJw1zEFH%2bQf8ZR3sUdYlK5GWlbcot0DLWJz2C334Eljjn/GRBSA9mMlfqUNV6SFFiNByjYGH/yUDDsyorFfCBA6M8TfGwqfVxsdiidd81U0UE9A061hP5TDwwDp0yHiSRB88xrTQBAea8GQe/gig9psgEgAH57BUiMCIQ2FibIaqhIZ5xuDI1JRKK1FS0oN2tFaHUqYHDmMOIAHTBxc4FR4cAOHq4OxJlsFhx6uKwHKUAcKbs9CHh5IyBKGPvV0CYAEMqGxQJs9iYAowMNImFYgUqAhgMklVmTMbFb5MX/NaoyxSgTeekivjY45K8GQ/zMGDyh7AA5%2b9iL9aDsua%2bOtWJABlbkiTYEHl8Eiaa0QZIjh%2bVQbp6kpiTGao7E4mCS4PIhwSPHCEh6XQZ17fGPDRtaegBQyFcO2xF%2bbAZT/sgf0C48C/8yQWCYBoqEwtnrUpS4s/aiozrM3s6ENQ2Rtw5pV9Eanhoyyy9o0gPq59VIVWHK6sFRy9WfzOk9hflQnW%2b8q0pwDkW8nq1SdNEji4TtCeNEiLL0mLB73W/OlHztpXproFwIsQD5y8CJ04ccLOnDljJ0%2be9PbcuXN2%2bvRph9PyMArO7du3/cOnEZ65f/dNMBKA/BkAE1xpWEIul3MkZUzMq8UStGavJ6n9NNSQAmgkHz0SAXB3KnHh2uJaiX9cYAnEAuDA6BMfuLP1saMXHnCwGOCMwT3sZfeoYkYkAP7i3L9/3%2b9mXoOJBfwQuXv3rrfPnz/3Pzv4/7Nnz/zHiX6U8NcHHP760PKizN3MDxF%2brDx%2b/Nivwz9tBfs9ue/5HlC7WBs%2bqCgfqKccxd/fg1xPtxfW7D9Ha5%2bV6vmlXc/7/VH9%2biaoS7t6piuVS9XnurLj6MmPMyf%2bTVLRiEVZKZa88wlcioQg60YAemj9B3FEP8jEkVuqAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"2172\" alt=\"blogging with SimpleMDE\" data-srcset=\"/assets/static/simple-mde.82a2fbd.cc9dd80848fcebe638e3ccc6991b79b5.png 480w, /assets/static/simple-mde.cbab2cf.cc9dd80848fcebe638e3ccc6991b79b5.png 1024w, /assets/static/simple-mde.f9f9e25.cc9dd80848fcebe638e3ccc6991b79b5.png 2172w\" data-sizes=\"(max-width: 2172px) 100vw, 2172px\" data-src=\"/assets/static/simple-mde.f9f9e25.cc9dd80848fcebe638e3ccc6991b79b5.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/simple-mde.f9f9e25.cc9dd80848fcebe638e3ccc6991b79b5.png\" width=\"2172\" alt=\"blogging with SimpleMDE\"></noscript></p>\n<h2 id=\"image-uploads\"><a href=\"#image-uploads\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Image uploads</h2>\n<p>This was the fun part.  One of my requirements for this project was to be able to upload and incorporate images without leaving the editor.  I chose to use an <strong>S3 Bucket</strong> for this due to the <a href=\"https://aws.amazon.com/s3/pricing/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">incredibly low costs</a>.</p>\n<p>The implementation ended up being fairly simple.  My <code class=\"language-text\">Image</code> class had three columns, it's own <code class=\"language-text\">id</code>, the associated <code class=\"language-text\">post_id</code>, and the public <code class=\"language-text\">location</code> at which the image is actually hosted on S3.  With this in place, all we had to do is upload the image to S3, and then create an entry in our <code class=\"language-text\">Image</code> table.</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># inside of a request:</span>\n<span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token string\">'file'</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># get a file from a form post</span>\n<span class=\"token keyword\">if</span> <span class=\"token builtin\">file</span> <span class=\"token keyword\">and</span> allowed_file<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># ensure the file is an allowed image type (.jpeg` .gif, .png)</span>\n\tfilename <span class=\"token operator\">=</span> secure_filename<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>filename<span class=\"token punctuation\">)</span> <span class=\"token comment\">#  https://werkzeug.palletsprojects.com/en/0.16.x/utils/#werkzeug.utils.secure_filename</span>\n\ts3_bucket<span class=\"token punctuation\">.</span>put_object<span class=\"token punctuation\">(</span>Key<span class=\"token operator\">=</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>slug<span class=\"token punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>filename<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">,</span> Body<span class=\"token operator\">=</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">,</span> ACL<span class=\"token operator\">=</span><span class=\"token string\">'public-read'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># upload image to AWS</span>\n\tnew_image <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">[</span><span class=\"token string\">\"AWS_BUCKET_URL\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>slug<span class=\"token punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>filename<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n\tnew_image<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p>With the <code class=\"language-text\">Post</code> class then updated to have a a one-to-many relationship with the images associated with it, (<code class=\"language-text\">images = db.relationship(&quot;Image&quot;)</code>), we can display the images associated with each post in the editor like so:</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>image-thumbnails</span><span class=\"token punctuation\">></span></span>\n\t{% for image in post.images %}\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>thumbnail<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>{{image.location}}<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\t{% endfor %}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>The end result looks like this:</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 2560 1760' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-414e7eb28c489d07eb5010d4599c8ff6'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-414e7eb28c489d07eb5010d4599c8ff6)' width='2560' height='1760' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAsCAYAAADVX77/AAAACXBIWXMAAAsSAAALEgHS3X78AAAJD0lEQVRo3uWa6W9TSRLA/fdxLYQEZvbL7szsh1kgCXwYzf/DByQEo5VGiFNIRBwhF7kDIbEdn3FISOIjd0ht/8ou5/nlvWeHMUbafVKp%2b3XXq66qrqvbjuWyaekIZFKSrbVR0IDTAb5inVJA1qOEbC4j2Xy22rf3GtRxOsRXrOMWkEpKLhmX/Oy05JYSVXDvucSiwv%2bsBagC3K4vj41KYWhQCgMvJD83I8sjQ1IYfC2F169keXJccTqqgCyMdRLY8fiittpfmK9agI11mJ9Y3vldpyHndrmhb/AdeIktOe17Ien8EPCPB0GruIanuIlT4CbbgxuFF7t27ZoYXHdw82a/9Pf3S2/vjfqYH0fb69fruH4cP35fX5/DvSk3He6NG8F0Dfr7%2b%2bTWrVv6TdT6N9z6rK24vb1u7N%2bhNPv6epVuv6PpXz929uxZMTh37pxcuXJFenp65OLFi%2bKd8wO43d09ik8/Crer67LS7HG4Fy5ckDNnzoTiXr58WWl2dXVF0jx//rziXr16VXmNonnp0iVdv7u7263/twbc2IcPH8QL79%2b/r4N/Lgy3VbxW8Jmfm5s7Nd2vxYvJ//kTOzw8FIODg4O2w/7%2bvuzt7cnu7q72abe3t7VPyzt4Xhz7lrFvwRNgMtct4OjoSAdov3z58pcBWjyJREImJibk1atXMjAwIENDQ/Lo0SN58eKFjo2Njcnk5KTiPH/%2bXIaHh/X9wYMHOsYDPfiKglZ48uLVLYBBrwKiPjw6ahyz96MTeMe0bGd3dnZka2tLW2B1dVXfmccSGKNlbHNzU0qlkn5nymwGXqH8j19BXplj1jFN7zqGzAz39vZl37VbmKob39mpmihAfweTdfO7u3v1sYODQ4e/45iqKsxoRzEX9bSyq2ZtKBHFoURTJi2yhK0bazAlR7BYKkuFD50w9LfZrbV12SyWZH1j081tq6DrG0XZ2CxqH7xSuSKf1zdVGWvrG1WmmphsM7NuFWz3P378qG41Pj6uEX5qakrdDqX4XSnQAkyT7XjaFUtagWKxqOux4/l8XgqFgnz69EnHcaeNjQ21BOPLa3Ux/2A2m9XAlcvlJB53ZWQyqZqdmZlR4uTSpaUl%2bfz5s%2bIwR8vc4uKiLtyKabdT0QsLC7p5CEsfnlOplMaZ9fV1WVlZkXK53MBX3QX8CkBQzOjt27caiZ88eaJmdPfuXblz5448e/ZMo/Xo6KhGcsZevnypuLdv39YI3mrk/qtgvLNhfj/HCubn53WzTHhwzF0CFQCY2VQqFY3CtJiQ5c5Wd6VTD2shIIIRiPF3yyK0gPHuzwANCjDNkIfZ/cePH8v9%2b/fl4cOHcu/ePd1tUpbfYvy532qJoEDXmEKPGnYj6JtW%2bub7PJj%2b6zdv1CLZfSzXLDJsg064wPLysvp%2bJpPRNp1Oq1/h60RWxqwlytLH78EhBtDif3xvfXun5TtMFrre%2bAGAwxgt4whECy7r0PfygIXyYKXVtuy%2bSWgcw/TZfWJAzr3nshnls2kMYDG0x%2bIGdnCAcYgjGC2HFhbx%2brxfy83GzK3C3KZuOTUTPvSUybam%2bfjAyzfS/eM/5edf/iV///Gq/PHH/XqwJiasra2dsOATMQCBsAI0RxSFwKrTHAABiKHJlVqqsR0EH1zGaAEWhQb06BNLmAdQoEVnWvBp6/Rdn2%2bKzpcrFDUOaCs1c/c%2bpoDRiWn56dpv8mv/7/LDP36V//z5UNNf0cm07xQWtAEnLGDVCZlILknOCQWkHaOpNFfXOYW4s4KEs4p0Jusgo/0Vx/CcS4/v3r3T2n52dlazCbU8VmJxBZfBemjBA5%2b0yjzFy/T0tI7RgsM481PTMzLufHl8YlJmHT1zJdwFN9AY4PhHOfFkSpKprCwmUlq4qXUSlwKKoEAFwCCMjzlGEMQYxr95Z9FpJxwM4xIwi3sgEGMIQIo05hnjAMT74OCg0mCePnRZi2/AsfM6Y9C1OWgDvFuVZ3EJS2GXw84CQS7YcBz2K8BMFzPEdDFh%2bpivmTNxgViBS9BakLNgRgACmAOfed75Dobpg29BEzzGwMUFaHERAHq05mp8Z1Wd8Y4F%2bE97/pQXtPuBCoBBFoRp/BpmGDOf9C7%2bPR%2bvEKaAr6lBTigAMwOoAKnuqPrIp9QBT58%2bVbOLOrkF7UJQ/g8a87dBJ78gaIsCeKySsrM4%2bdXSjd3OcOSkWmSOjME7URj8b136flMF2IfUAN6gZTc0tER2rOGNq7Z4p7UjKO7xvZ62WYCZGgTZVTsHYBnstvecAA4Bkzhh44ZjdQBzFlAtmNICxBTL9wRTG6f/qVZz2JzhWYBmDNqM2x1j2yyABUhTlqPJ3%2bRy0g/tTC0FelMeKQrLsfhB4LRzOIx7BTPl2Fi92Kq9ewFeTFDDMxqWlewqrS0KAGB%2bZGSknost/5KzERpBEZwAiTtw8EAx5Gbm%2bRa3IMVZDW%2blM2MUMHZvQB1hR1bS29eeIrHItikA7ZKvYdSAXUQYdh9BYJY%2bcwiHAIaL8KRQBKPooUUJphQ7yLAG81iZHVntvO49XVp7fJV90PBuN0JtiQGdPMcH5fWwSw%2bE3dqq1G%2bQq7BVV9Te/l4kjSj5YkEntaAP232pGVaetrIJQTjNNjFsPBYkvPcYSpT1XnK04wrL%2b6sRaxDICHr%2bC5dmdKLmrHYx3ptagF9bdk6nBrALhyA/O63bQINCiwhOJGcdFECQZey0NINM3PgkKBvvfstr%2bGUoSIswZTfEgF18hLlDK7/eeH/FAUhx7Hy5VnmehkaYVdolC9lsYeGj8o4sYbzHwnfqSH/0qFSqRZGZZ7NzQCTUfkYDOL%2bTCskYxxYWgh/xY0jYU3Y0oWsXpqFZoFQqShCUgXJJ79kA%2bmG4oTTcNwq1fslVjyUXzYGig4qL5DsOKswVN4/xa98orpsv1eZPs7bxrbxH4MUyaVeENIWktIZ3DOmUqyUWnQnGF/S/OfSzE%2b8kNzkuOf4j6PrZ97OuvmjEB5dvEsm4ZGamJD8%2bJhk3lsmkTs1Dle9o3r/Z/wQhrgLFq39Mii/MS94JXxgd1v8DFkaGJD87Izn%2bKVbDV8EdqOL469z0pBSG31b/RFnDazf8F7q49fKH6yMrAAAAAElFTkSuQmCC' /%3e%3c/svg%3e\" width=\"2560\" alt=\"editing a post with SimpleMDE and S3 uploading\" data-srcset=\"/assets/static/edit-post.82a2fbd.fce246ab67935f857f74a1ce7ac244ad.png 480w, /assets/static/edit-post.cbab2cf.fce246ab67935f857f74a1ce7ac244ad.png 1024w, /assets/static/edit-post.2665e34.fce246ab67935f857f74a1ce7ac244ad.png 1920w, /assets/static/edit-post.42db587.fce246ab67935f857f74a1ce7ac244ad.png 2560w\" data-sizes=\"(max-width: 2560px) 100vw, 2560px\" data-src=\"/assets/static/edit-post.42db587.fce246ab67935f857f74a1ce7ac244ad.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/edit-post.42db587.fce246ab67935f857f74a1ce7ac244ad.png\" width=\"2560\" alt=\"editing a post with SimpleMDE and S3 uploading\"></noscript></p>\n<h2 id=\"styling-and-scripting\"><a href=\"#styling-and-scripting\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Styling and Scripting:</h2>\n<h3 id=\"flexbox-for-all\"><a href=\"#flexbox-for-all\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Flexbox for all:</h3>\n<p>After removing Bootstrap, I styled the app by-hand with two main CSS files, one for the base, and another for mobile.  Opting to use Flexblox for most dynamic <code class=\"language-text\">&lt;div /&gt;</code> elements was relatively painless.  I had never used a css <em>file</em> that activated with a media query before, but it's very easy to implement in HTML:</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>stylesheet</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>text/css</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>{{ url_for('static', filename='css/blog.css') }}<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>screen and (max-width: 650px)<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>{{ url_for('static', filename='css/mobile-blog.css') }}<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre>\n<h3 id=\"going-old-school-with-jquery\"><a href=\"#going-old-school-with-jquery\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Going old-school with <code class=\"language-text\">JQuery</code>:</h3>\n<p>Up unto this point I had almost written no JavaScript! ðŸ˜²  To be sure, there was JavaScript living on my site in the form of SimpleMDE, but other than that, most everything else was server-rendered.  So in order to accomplish a few simple quality of life niceties, I used a grand total of 59 lines of JavaScript to:\n- Give posts human-readable datetime strings with the <a href=\"https://momentjs.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Moment.js</a> library (overkill, I know)\n- Wrap img tags inside of my posts with <a href=\"http://fancyapps.com/fancybox/3/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">FancyBox</a>\n- Fade out a div alerts created using Flask Flash with JQuery\n- Use Vanilla JS to:\n- Copy a <strong>Markdown</strong> img tag to the clipboard when clicking on an image in the <code class=\"language-text\">related media</code> section of the editor\n- Create a sticky navbar that hides a header on scroll</p>\n<p>I was actually impressed that I was able to create a decently slick Web App with such little Javascript.</p>\n<h3 id=\"reflections-on-span-styletext-decoration-underlinenotspan-using-a-modern-spa-framework-in-2020\"><a href=\"#reflections-on-span-styletext-decoration-underlinenotspan-using-a-modern-spa-framework-in-2020\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Reflections on <span style=\"text-decoration: underline\">NOT</span> using a modern SPA framework in 2020:</h3>\n<p>Reaching for <a href=\"https://jinja.palletsprojects.com/en/2.10.x/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jinja Templates</a> and Jquery in 2020 certainly felt a little bit wrong, but the overall experience wasn't terrible.  In fact, development of the blog was probably speedier than if I had chosen to use a modern framework like React, Vue, or even Angular.</p>\n<p>The limitations of not using any AJAX calls and handling everything via web-form <code class=\"language-text\">POST</code> requests however certainly began to have its limitations.  Not using AJAX meant that anything that was related to creating &#x26; updating the blog post lived inside of the same <code class=\"language-text\">&lt;form \\&gt;</code> tag.</p>\n<p>Take the image upload feature as an example:  Let's imagine a user is drafting a blog post, and wants to upload an image.  Because there is no AJAX, the page is going to reload.  So in order to preserve the work that the user has already written, we first <code class=\"language-text\">POST</code> the entire contents of the blog draft, save it, and <em>then</em> handle the image upload.  In actuality, the image upload field lives inside of the same form used for simply saving a draft.  We just only process the image if the user clicks the <code class=\"language-text\">upload image</code> submit form as opposed to the <code class=\"language-text\">save</code> or <code class=\"language-text\">preview</code> submit forms.  </p>\n<p>The Python code the processes the request ends up looking like this, and it certainly <em>feels</em> a little wrong (concatenated for brevity):</p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">_create_or_edit</span><span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">,</span> template<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># always save the post</span>\n    post<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    flash<span class=\"token punctuation\">(</span><span class=\"token string\">'Post saved.'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'success'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Route user to the preview page</span>\n    <span class=\"token keyword\">if</span> request<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'action'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">'preview'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span>url_for<span class=\"token punctuation\">(</span><span class=\"token string\">'preview'</span><span class=\"token punctuation\">,</span> slug<span class=\"token operator\">=</span>post<span class=\"token punctuation\">.</span>slug<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\">#handle an image upload</span>\n    <span class=\"token keyword\">elif</span> request<span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'action'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">'upload-image'</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token string\">'file'</span><span class=\"token punctuation\">]</span>\n        new_image <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span> <span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">[</span><span class=\"token string\">\"AWS_BUCKET_URL\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>slug<span class=\"token punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>filename<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n        new_image<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># If the post is published, route user to the 'detail screen'</span>\n    <span class=\"token keyword\">elif</span> post<span class=\"token punctuation\">.</span>published<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span>url_for<span class=\"token punctuation\">(</span><span class=\"token string\">'detail'</span><span class=\"token punctuation\">,</span> slug<span class=\"token operator\">=</span>post<span class=\"token punctuation\">.</span>slug<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># Otherwise, just save the post and show user back to the editor</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> redirect<span class=\"token punctuation\">(</span>url_for<span class=\"token punctuation\">(</span><span class=\"token string\">'edit'</span><span class=\"token punctuation\">,</span> slug<span class=\"token operator\">=</span>post<span class=\"token punctuation\">.</span>slug<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p>The bummer about this logic is that it has to live inside of a single routing function, so it's difficult to have separate concerns.</p>\n<h2 id=\"next-steps\"><a href=\"#next-steps\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Next Steps:</h2>\n<p>Though tagging and commenting are implemented from a database perspective, there isn't yet a web interface for this.  </p>\n"}}]}}},"context":{}}