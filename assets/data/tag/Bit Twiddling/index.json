{"hash":"b4e5aafcc971822d774cc0c634dcc46785c41ba9","data":{"tag":{"title":"Bit Twiddling","belongsTo":{"edges":[{"node":{"title":"Bit Twiddling in JavaScript","path":"/blog/posts/bit-twiddling-in-java-script/","date":"24. January 2020","timeToRead":5,"description":"Recently, I came across a fun C++ challenge to count the number of set bits in an integer.  Spending a lot of time in the browser, I wanted to re-implement it in JavaScript.","content":"<p>Recently, I came across a fun C++ challenge to <strong>count the number of set bits</strong> in an integer.  Spending a lot of time in the browser, I wanted to re-implement it in JavaScript.</p>\n<p>The challenge itself involves expressing integers in their binary representation.  For those not familiar with base-10 to base-2 conversations, and what <code class=\"language-text\">set bits</code> are, check out the table below:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">number</th>\n<th align=\"center\">128</th>\n<th align=\"center\">64</th>\n<th align=\"center\">32</th>\n<th align=\"center\">16</th>\n<th align=\"center\">8</th>\n<th align=\"center\">4</th>\n<th align=\"center\">2</th>\n<th align=\"center\">0</th>\n<th align=\"center\">conversion</th>\n<th align=\"center\">set bits</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><code class=\"language-text\">4</code></td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\"><code class=\"language-text\">1</code></td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">4¹ = 4</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">4</code></td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\"><code class=\"language-text\">1</code></td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">4¹ = 4</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">8</code></td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\"><code class=\"language-text\">1</code></td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">8¹ = 8</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">7</code></td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\"><code class=\"language-text\">1</code></td>\n<td align=\"center\"><code class=\"language-text\">1</code></td>\n<td align=\"center\"><code class=\"language-text\">1</code></td>\n<td align=\"center\">4¹+2¹+0¹ = 7</td>\n<td align=\"center\">3</td>\n</tr>\n<tr>\n<td align=\"center\"><code class=\"language-text\">35</code></td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\"><code class=\"language-text\">1</code></td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\"><code class=\"language-text\">1</code></td>\n<td align=\"center\"><code class=\"language-text\">1</code></td>\n<td align=\"center\">32¹+2¹+0¹ = 35</td>\n<td align=\"center\">3</td>\n</tr>\n</tbody>\n</table>\n<br/>\n<h3 id=\"a-note-on-javascript-numbers\"><a href=\"#a-note-on-javascript-numbers\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>A note on JavaScript Numbers:</h3>\n<p>Under the hood, JavaScript represents <em>all</em> numbers as 64 bit floating point numbers.  When we use a bitwise operator on a JavaScript <code class=\"language-text\">number</code>, it is transformed into a 32 bit integer.</p>\n<p>We can demonstrate the conversion to a 32 bit integer by taking a JavaScript <code class=\"language-text\">number</code>, and performing a non mutating right bit shift by zero on it.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\ny <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token comment\">// = 6</span>\n<span class=\"token punctuation\">(</span>y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">0</span> <span class=\"token comment\">// = 6 >> 0 = 6.  Six bit shifted to the right by zero bits is still six</span>\n\n<span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token number\">2147483647</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// maximum value of a 32 bit integer.</span>\ny <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token comment\">// = 2147483648, number increments correctly.</span>\n<span class=\"token punctuation\">(</span>y <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">0</span> <span class=\"token comment\">// = -2147483648, bitwise right shift by zero. 32 bit integer overflows.</span></code></pre>\n<p>MDN, has a very good explanation of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Bitwise_logical_operators\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">some of the quirks</a> of this conversion:</p>\n<blockquote>\n<p>Numbers with more than 32 bits get their most significant bits discarded. For example, the following integer with more than 32 bits will be converted to a 32 bit integer</p>\n<pre class=\"language-text\"><code class=\"language-text\">Before: 11100110111110100000000000000110000000000001\nAfter:              10100000000000000110000000000001</code></pre>\n</blockquote>\n<p>Don't expect bitwise operations to work as expected with numbers that need more than 32 bits of of memory, or any number over <code class=\"language-text\">2147483647</code>.</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Show two different numbers from binary to base-10:</span>\n\n<span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"11100110111110100000000000000110000000000001\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 15872588537857</span>\n<span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>            <span class=\"token string\">\"10100000000000000110000000000001\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2684379137</span>\n\n<span class=\"token comment\">// Show those same numbers bit shifted to the right by zero:</span>\n\n<span class=\"token number\">15872588537857</span> <span class=\"token operator\">>></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -1610588159</span>\n<span class=\"token number\">2684379137</span> <span class=\"token operator\">>></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -1610588159</span>\n\n<span class=\"token comment\">// ¯\\_(ツ)_/¯</span></code></pre>\n<h3 id=\"displaying-integer-bits-in-javascript\"><a href=\"#displaying-integer-bits-in-javascript\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Displaying integer bits in JavaScript:</h3>\n<p>To see how we can implement <code class=\"language-text\">countSetBits</code>, we will use the following helper function to display the binary representation of an integer:</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">displayBits</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> bits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        bits<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        n <span class=\"token operator\">=</span> n <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> bits<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p><strong>Note</strong>: There is a far simpler way of displaying an integer to binary in JavaScript:</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"101\"</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"111\"</span></code></pre>\n<p>We will instead use the <code class=\"language-text\">displayBits</code> function above to discuss bitwise operators.</p>\n<p>The function stores the ones and zeros in an Array called <code class=\"language-text\">bits</code> and returns it's reversed value.</p>\n<p>In the loop, the function evaluates an integer <code class=\"language-text\">n</code>, and while <code class=\"language-text\">n</code> is not falsey it:</p>\n<ul>\n<li>Evaluates <code class=\"language-text\">n &amp; 1</code>, and pushes the result onto <code class=\"language-text\">bits</code></li>\n<li>Reassigns <code class=\"language-text\">n</code> to <code class=\"language-text\">n &gt;&gt; 1</code></li>\n</ul>\n<h4 id=\"evaluate-n--1-and-push-the-result-onto-bits\"><a href=\"#evaluate-n--1-and-push-the-result-onto-bits\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Evaluate <code class=\"language-text\">n &amp; 1</code>, and push the result onto <code class=\"language-text\">bits</code>:</h4>\n<p>The bitwise <code class=\"language-text\">&amp;</code> operator compares each bit in two integers and returns <code class=\"language-text\">1</code> if both bits are set to <code class=\"language-text\">1</code>, otherwise it returns <code class=\"language-text\">0</code>.</p>\n<p>For example, using 5 and 7:</p>\n<table>\n<thead>\n<tr>\n<th>base 10</th>\n<th align=\"right\">binary</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">5</code></td>\n<td align=\"right\"><code class=\"language-text\">101</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">7</code></td>\n<td align=\"right\"><code class=\"language-text\">111</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">5 &amp; 7</code></td>\n<td align=\"right\"><code class=\"language-text\">101</code></td>\n</tr>\n</tbody>\n</table>\n<br/>\n<p>And using 5 and 1 (our function uses <code class=\"language-text\">n &amp; 1</code>):</p>\n<table>\n<thead>\n<tr>\n<th>base 10</th>\n<th align=\"right\">binary</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">5</code></td>\n<td align=\"right\"><code class=\"language-text\">101</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">1</code></td>\n<td align=\"right\"><code class=\"language-text\">1</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">5 &amp; 1</code></td>\n<td align=\"right\"><code class=\"language-text\">1</code></td>\n</tr>\n</tbody>\n</table>\n<br/>\n<p>Using 7 and 1:</p>\n<table>\n<thead>\n<tr>\n<th>base 10</th>\n<th align=\"right\">binary</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">7</code></td>\n<td align=\"right\"><code class=\"language-text\">111</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">1</code></td>\n<td align=\"right\"><code class=\"language-text\">1</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">7 &amp; 1</code></td>\n<td align=\"right\"><code class=\"language-text\">1</code></td>\n</tr>\n</tbody>\n</table>\n<br/>\n<p>Using 8 and 1:</p>\n<table>\n<thead>\n<tr>\n<th>base 10</th>\n<th align=\"right\">binary</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">8</code></td>\n<td align=\"right\"><code class=\"language-text\">1000</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">1</code></td>\n<td align=\"right\"><code class=\"language-text\">1</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">8 &amp; 1</code></td>\n<td align=\"right\"><code class=\"language-text\">0</code></td>\n</tr>\n</tbody>\n</table>\n<br/>\n<p>We can see that when two ones <strong>in the same position</strong> overlap, the <code class=\"language-text\">&amp;</code> operator returns a <code class=\"language-text\">1</code> in that position, otherwise it returns a <code class=\"language-text\">0</code>.</p>\n<p>When we perform a bitwise <code class=\"language-text\">n &amp; 1</code> we are only are interested in <code class=\"language-text\">n</code>'s <a href=\"https://en.wikipedia.org/wiki/Bit_numbering#Least_significant_bit\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">least significant bit</a> (its rightmost bit), to see if it is a <code class=\"language-text\">0</code> or <code class=\"language-text\">1</code>.</p>\n<p>Because our loop runs <code class=\"language-text\">bits.push(n &amp; 1)</code>, we will either push a <code class=\"language-text\">0</code> or <code class=\"language-text\">1</code> into our bits array based on whether or not <code class=\"language-text\">n</code>'s least significant bit is set or not. </p>\n<h4 id=\"reassign-n-to-n--1\"><a href=\"#reassign-n-to-n--1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Reassign <code class=\"language-text\">n</code> to <code class=\"language-text\">n &gt;&gt; 1</code>:</h4>\n<p>By reassigning <code class=\"language-text\">n</code> to <code class=\"language-text\">n &gt;&gt; 1</code>, we shift all of <code class=\"language-text\">n</code>'s bits to the right by exactly one bit.</p>\n<ul>\n<li>\n<p>The integer 5 in binary is: <code class=\"language-text\">101</code></p>\n<ul>\n<li><code class=\"language-text\">5 &gt;&gt; 1</code> is <code class=\"language-text\">10</code> (<strong>2</strong> as a base-10 integer)</li>\n<li><code class=\"language-text\">5 &gt;&gt; 1 &gt;&gt; 1</code> is <code class=\"language-text\">1</code> (<strong>1</strong> as a base-10 integer)</li>\n<li><code class=\"language-text\">5 &gt;&gt; 1 &gt;&gt; 1 &gt;&gt; 1</code> is <code class=\"language-text\">0</code> (<strong>0</strong> as a base-10 integer)</li>\n</ul>\n</li>\n</ul>\n<p>Putting these two aspects of our loop together allow us to display base 10 integers in their binary format:</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">displayBits</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 0, 1]</span>\n<span class=\"token function\">displayBits</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 0, 0, 1]</span>\n<span class=\"token function\">displayBits</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 1, 0, 0, 1, 0, 0, 0]</span></code></pre>\n<h3 id=\"counting-set-bits\"><a href=\"#counting-set-bits\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Counting Set Bits:</h3>\n<p>Modifying our <code class=\"language-text\">displayBits</code> function, we can change:</p>\n<ul>\n<li><code class=\"language-text\">const bits = [];</code> to <code class=\"language-text\">let setBits = 0;</code> </li>\n<li><code class=\"language-text\">bits.push(n &amp; 1);</code> to <code class=\"language-text\">setBits += (n &amp; 1);</code></li>\n<li><code class=\"language-text\">return bits.reverse();</code> to <code class=\"language-text\">return setBits;</code></li>\n</ul>\n<p>Making our new function look like this:</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">countSetBits</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> setBits <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        setBits <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        n <span class=\"token operator\">=</span> n <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> setBits<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>This will certainly work, and when we try it out for ourselves we can see it yields the correct results:</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">countSetBits</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n<span class=\"token function\">countSetBits</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></code></pre>\n<p>However, there is a faster (and much more interesting) way to implement this function:</p>\n<h3 id=\"a-more-efficient-way\"><a href=\"#a-more-efficient-way\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>A More Efficient Way:</h3>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">countSetBits</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> setBits <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        n <span class=\"token operator\">&amp;=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        setBits <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> setBits<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>The first thing to notice is that in our while loop we are <strong>always</strong> incrementing setBits by 1. This means that the while loop <em>only</em> iterates <em>m</em> times, where <em>m</em> is the number of set bits.  In our original implementation, our loop always ran <em>n</em> times, where <em>n</em> is the number of bits taken to express the integer.</p>\n<p>Considering the integer <strong>274,877,906,945</strong> which expressed in binary is <code class=\"language-text\">100000000000000000000000000000000000001</code>:</p>\n<p>Our original implementation's while loop would have to run through <strong>39 iterations</strong>, one for each bit.  In our new implementation however, only <strong>2 iterations</strong> are needed.</p>\n<p>Granted, this scenario is somewhat hyperbolic, but it still demonstrates the potential time complexity savings of the second algorithm.</p>\n<p>The \"special sauce\" that gives the second algorithm its advantage lies in the operation, <code class=\"language-text\">n &amp;= n -1;</code>, which reassigns <em>n</em> to the bitwise <code class=\"language-text\">&amp;</code> comparison between itself and n - 1.</p>\n<p>Starting with n = 65, which is <code class=\"language-text\">1000001</code> in binary, we can see how the algorithm terminates in just two iterations:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Iteration</th>\n<th align=\"center\">n</th>\n<th align=\"center\">n - 1</th>\n<th align=\"center\">n &#x26; (n - 1)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">1</td>\n<td align=\"center\"><code class=\"language-text\">1000001</code></td>\n<td align=\"center\"><code class=\"language-text\">1000000</code></td>\n<td align=\"center\"><code class=\"language-text\">1000000</code></td>\n</tr>\n<tr>\n<td align=\"center\">2</td>\n<td align=\"center\"><code class=\"language-text\">1000000</code></td>\n<td align=\"center\"><code class=\"language-text\">0111111</code></td>\n<td align=\"center\"><code class=\"language-text\">0000000</code></td>\n</tr>\n<tr>\n<td align=\"center\">3</td>\n<td align=\"center\"><code class=\"language-text\">0000000</code></td>\n<td align=\"center\">N/A</td>\n<td align=\"center\">N/A</td>\n</tr>\n</tbody>\n</table>\n<br />\n<p>We can see that by the time the third iteration wants to start, <em>n</em> is already 0, so the iteration never fires and the function exits.</p>\n"}}]}}},"context":{}}