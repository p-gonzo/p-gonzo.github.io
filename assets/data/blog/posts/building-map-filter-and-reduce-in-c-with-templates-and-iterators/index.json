{"hash":"bd924ccf606a4b3433bd647d973b1272ce63d6fc","data":{"post":{"title":"Building Map, Filter, and Reduce in C++ with Templates and Iterators","path":"/blog/posts/building-map-filter-and-reduce-in-c-with-templates-and-iterators/","date":"20. May 2020","timeToRead":8,"tags":[{"id":"C++","title":"C++","path":"/tag/C%2B%2B/"},{"id":"Functional Programing","title":"Functional Programing","path":"/tag/Functional%20Programing/"},{"id":"Generics","title":"Generics","path":"/tag/Generics/"},{"id":"Templates","title":"Templates","path":"/tag/Templates/"},{"id":"Lambda Expressions","title":"Lambda Expressions","path":"/tag/Lambda%20Expressions/"}],"description":"For funsies, let's implement JavaScript's <code class=language-text>Map()</code>, <code class=language-text>Filter()</code>, and <code class=language-text>Reduce()</code> in C++.","content":"<p>For starters, let's acknowledge that C++ already has it's own superior versions of Map, Filter, and Reduce in the form of <code class=\"language-text\">std::transform</code>, <code class=\"language-text\">std::remove_if</code>, and <code class=\"language-text\">std::accumulate</code>.  Our goal isn't to compete with these preexisting functions, but to instead learn about several C++ features by implementing simple versions from scratch.  With that out of the way, let's do some functional programming in C++!</p>\n<h2 id=\"part-i---using-a-templated-stdvector\"><a href=\"#part-i---using-a-templated-stdvector\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Part I - Using a templated <code class=\"language-text\">std::vector</code>:</h2>\n<p>Imagining for a moment that we are okay with our <a href=\"https://eloquentjavascript.net/05_higher_order.html#p_cao2fH68Tj\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">higher order functions</a> (map, filter, reduce) only being able to operate on a <code class=\"language-text\">std::vector</code>, we might start with something like this:</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ForEach</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>items<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">&amp;</span>item<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> forEachCb<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>T item<span class=\"token operator\">:</span> items<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">forEachCb</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Our ForEach function above accepts an array of type <code class=\"language-text\">T</code> and callback that accepts one item of type <code class=\"language-text\">T</code> as its parameter and returns nothing.  In the ForEach body, we iterate through each item in our vector and invoke the callback on each item.</p>\n<p>We could invoke our ForEach function like so:</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\">std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> nums <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">printNum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\nForEach<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> printNum<span class=\"token punctuation\">)</span></code></pre>\n<p>Or using Lambda syntax:</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\">std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> nums <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nForEach<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>For an overview of Lambda Expression syntax, check out the docs from Microsoft <a href=\"https://docs.microsoft.com/en-us/cpp/cpp/lambda-expressions-in-cpp\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.</p>\n<h3 id=\"map\"><a href=\"#map\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">Map()</code>:</h3>\n<p>Because ForEach accepts a callback function, we can use it to compose our three main methods.  Starting with Map, we might implement something like this:</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> T2<span class=\"token operator\">></span>\nstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>T2<span class=\"token operator\">></span> <span class=\"token function\">Map</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>items<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token function\">T2</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">&amp;</span>item<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> mapCb<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>T2<span class=\"token operator\">></span> mappedVec<span class=\"token punctuation\">;</span>\n    ForEach<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>mappedVec<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>mapCb<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">&amp;</span>item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> mappedVec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">mapCb</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> mappedVec<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>We can see that Map is a templated function that accepts two types: <code class=\"language-text\">T</code> - the data type contained in the original array, and <code class=\"language-text\">T2</code> - the data type contained in returned array.  The function accepts the parameters <code class=\"language-text\">items</code> a <code class=\"language-text\">std::vector&lt;T&gt;&amp;</code> and a callback function.  The callback accepts a <code class=\"language-text\">T&amp;</code> and returns a <code class=\"language-text\">T2</code>.</p>\n<p>Map creates a <code class=\"language-text\">std::vector&lt;T2&gt;</code> and returns it at the end of the function call.  In between, it invokes ForEach, passing it the original <code class=\"language-text\">std::vector&lt;T&gt;</code> and a callback function that pushes the item onto the <code class=\"language-text\">mappedVec</code> after calling the user-supplied <code class=\"language-text\">mapCb</code> on it.</p>\n<p>It's useful to note that there are two callbacks occurring: <strong>1)</strong> the user-supplied callback which is nested inside <strong>2)</strong> the callback supplied by Map that gets consumed by ForEach.  </p>\n<p>Finally we see the <code class=\"language-text\">[&amp;mappedVec, &amp;mapCb]</code> syntax at the start of our lambda expression.  This allows our <code class=\"language-text\">mappedVec</code> and <code class=\"language-text\">mapCb</code> to remain in scope as the expression <code class=\"language-text\">mappedVec.push_back(mapCb(item))</code> gets passed to ForEach.  This syntax allows us to create a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">closure</a> around those two variables.</p>\n<p>We can then invoke our Map function like so: </p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\">std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> nums <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">IntContainer</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token function\">IntContainer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">val</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> val <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">auto</span> mappedVed <span class=\"token operator\">=</span> Map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> IntContainer<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token function\">IntContainer</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">*</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>The example above maps between a <code class=\"language-text\">std::vector</code> containing the <code class=\"language-text\">int</code> type and <code class=\"language-text\">std::vector</code> containing a custom type, <code class=\"language-text\">IntContainer</code>. </p>\n<h3 id=\"filter-and-reduce\"><a href=\"#filter-and-reduce\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">Filter()</code> and <code class=\"language-text\">Reduce()</code>:</h3>\n<p>We can implement Filter and Reduce following a similar pattern:</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">></span>\nstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token function\">Filter</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>items<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">&amp;</span>item<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> filterCb<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> filteredVec<span class=\"token punctuation\">;</span>\n    ForEach<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>filteredVec<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>filterCb<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">&amp;</span>item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">filterCb</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> filteredVec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> filteredVec<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Filter doesn't require a second return type <code class=\"language-text\">T2</code>, as we are assuming that the filtered vector will always be of the same type as the input vector.</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> T2<span class=\"token operator\">></span>\nT2 <span class=\"token function\">Reduce</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>items<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token function\">T2</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">&amp;</span>item<span class=\"token punctuation\">,</span> T2 <span class=\"token operator\">&amp;</span>memo<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> reduceCb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T2 <span class=\"token operator\">&amp;</span>start<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    T2 memo <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span>\n    ForEach<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>memo<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>reduceCb<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">&amp;</span>item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> memo <span class=\"token operator\">=</span> <span class=\"token function\">reduceCb</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> memo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> memo<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Reduce uses a second type, <code class=\"language-text\">T2</code>, however unlike Map, it is not the type contained in a returned <code class=\"language-text\">std::vector</code>, but rather the return type itself.  </p>\n<p>The T2 value is passed as a const ref, <code class=\"language-text\">start</code>, which is assigned to a non-const <code class=\"language-text\">memo</code> variable.  That variable is then mutated each time ForEach runs its callback:</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\">memo <span class=\"token operator\">=</span> <span class=\"token function\">reduceCb</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> memo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"part-ii---using-iterators\"><a href=\"#part-ii---using-iterators\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Part II - Using iterators:</h2>\n<p>Though the above code works well, it will only work if our containing class is a <code class=\"language-text\">std::vector</code>.  What if we want to Filter a <code class=\"language-text\">std::string</code> or Reduce a <code class=\"language-text\">std::list</code>?  To do this we'll refactor or original functions above to use the iterator interface.</p>\n<h3 id=\"foreach\"><a href=\"#foreach\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">ForEach()</code>:</h3>\n<p>To cut down on the amount of boilerplate, we're going to create a <code class=\"language-text\">using</code> clause that allows us to grab the type contained within an iterator:</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> IteratorType<span class=\"token operator\">></span>\n<span class=\"token keyword\">using</span> ItemType <span class=\"token operator\">=</span> <span class=\"token keyword\">typename</span> std<span class=\"token operator\">::</span>iterator_traits<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> IteratorType<span class=\"token operator\">::</span>iterator<span class=\"token operator\">></span><span class=\"token operator\">::</span>value_type<span class=\"token punctuation\">;</span></code></pre>\n<p>With that in place, we can implement our new <code class=\"language-text\">ForEach</code> like so:</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> IteratorType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ForEach</span><span class=\"token punctuation\">(</span>IteratorType <span class=\"token operator\">&amp;</span>items<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span>ItemType<span class=\"token operator\">&lt;</span>IteratorType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>item<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> forEachCb<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typename</span> IteratorType<span class=\"token operator\">::</span>iterator ptr <span class=\"token operator\">=</span> items<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ptr <span class=\"token operator\">!=</span> items<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>ptr<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">forEachCb</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Similar to our original ForEach, the signature requires two parameters, however the first parameter, <code class=\"language-text\">items</code>, is no longer a <code class=\"language-text\">std::vector&lt;T&gt;</code>, but instead an <code class=\"language-text\">IteratorType</code>.  The second parameter is still a <code class=\"language-text\">std::function</code> though it's signature is different in that instead of each item being of type <code class=\"language-text\">T</code>, they're of type <code class=\"language-text\">&lt;ItemType&lt;IteratorType&gt;&gt;</code>.</p>\n<p>Our iteration method has also changed.  Instead of using a C++ <a href=\"https://en.cppreference.com/w/cpp/language/range-for\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">range-based for loop</a>, we're using the <a href=\"https://en.cppreference.com/w/cpp/iterator/iterator\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">iterator interface</a> and a normal for loop to iterate though each item and invoke a callback on the dereferenced pointer.</p>\n<p>The syntax used in the function declaration is messier, however it allows us to do the following:</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\">std<span class=\"token operator\">::</span>list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span> chars <span class=\"token punctuation\">{</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'d'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> nums <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nstd<span class=\"token operator\">::</span>string word <span class=\"token punctuation\">{</span> <span class=\"token string\">\"Hello\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nForEach<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>list<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>chars<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">&amp;</span>chr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> chr <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nForEach<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> num <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nForEach<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>string<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">&amp;</span>letter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> letter <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>As you can see, our ForEach function is now agnostic as to whether we are passing a <code class=\"language-text\">std::string</code>, <code class=\"language-text\">std::vector</code>, <code class=\"language-text\">std::list</code>, or any other containing class so long as it implements the iterator interface.</p>\n<h3 id=\"map-filter-and-reduce\"><a href=\"#map-filter-and-reduce\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a><code class=\"language-text\">Map()</code>, <code class=\"language-text\">Filter()</code>, and <code class=\"language-text\">Reduce()</code>:</h3>\n<p>Our new Map function's signature is almost identical to our new ForEach signature, with the only difference being that the callback now returns a <code class=\"language-text\">ItemType&lt;IteratorType&gt;</code> instead of <code class=\"language-text\">void</code>.</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> IteratorType<span class=\"token operator\">></span>\nIteratorType <span class=\"token function\">Map</span><span class=\"token punctuation\">(</span>IteratorType <span class=\"token operator\">&amp;</span>items<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span>ItemType<span class=\"token operator\">&lt;</span>IteratorType<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>ItemType<span class=\"token operator\">&lt;</span>IteratorType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>item<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> mapCb<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    IteratorType mappedIterator<span class=\"token punctuation\">;</span>\n    ForEach<span class=\"token operator\">&lt;</span>IteratorType<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>mappedIterator<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>mapCb<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> mappedIterator<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">mapCb</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> mappedIterator<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>Filter and Reduce are also updated accordingly:</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> IteratorType<span class=\"token operator\">></span>\nIteratorType <span class=\"token function\">Filter</span><span class=\"token punctuation\">(</span>IteratorType <span class=\"token operator\">&amp;</span>items<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">(</span>ItemType<span class=\"token operator\">&lt;</span>IteratorType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>item<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> filterCb<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    IteratorType filteredIterator<span class=\"token punctuation\">;</span>\n    ForEach<span class=\"token operator\">&lt;</span>IteratorType<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>filteredIterator<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>filterCb<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">filterCb</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> filteredIterator<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> filteredIterator<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> IteratorType<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> MemoType<span class=\"token operator\">></span>\nMemoType <span class=\"token function\">Reduce</span><span class=\"token punctuation\">(</span>IteratorType <span class=\"token operator\">&amp;</span>items<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token function\">MemoType</span><span class=\"token punctuation\">(</span>ItemType<span class=\"token operator\">&lt;</span>IteratorType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>item<span class=\"token punctuation\">,</span> MemoType <span class=\"token operator\">&amp;</span>memo<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> reduceCb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> MemoType <span class=\"token operator\">&amp;</span>start<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    MemoType memo <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span>\n    ForEach<span class=\"token operator\">&lt;</span>IteratorType<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>memo<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>reduceCb<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> memo <span class=\"token operator\">=</span> <span class=\"token function\">reduceCb</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> memo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> memo<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>With our three functions rewritten to accommodate any iterator, we can now begin using them.</p>\n<p>Such as using Map to perform a Rot1-like sypher over the characters in a string:</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\">std<span class=\"token operator\">::</span>string word <span class=\"token punctuation\">{</span> <span class=\"token string\">\"Hello\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">auto</span> mappedWord <span class=\"token operator\">=</span> Map<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>string<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">&amp;</span>chr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>chr <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Or reducing the a string into the sum of its character integer representations:</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\">std<span class=\"token operator\">::</span>string word <span class=\"token punctuation\">{</span> <span class=\"token string\">\"Hello\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> wordToNum <span class=\"token operator\">=</span> Reduce<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">&amp;</span>chr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>memo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> memo <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>chr<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// The above equals exactly 500 🤯</span></code></pre>\n<p>We can even operate on a <code class=\"language-text\">std::map</code>:</p>\n<pre class=\"language-cpp\"><code class=\"language-cpp\">std<span class=\"token operator\">::</span>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span> items <span class=\"token punctuation\">{</span>std<span class=\"token operator\">::</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nForEach<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span> pair<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> pair<span class=\"token punctuation\">.</span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">&lt;&lt;</span> pair<span class=\"token punctuation\">.</span>second <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"final-thoughts\"><a href=\"#final-thoughts\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Final Thoughts:</h2>\n<p>Hopefully this was a useful exercise in using iterators and templated functions to recreate the Filter, Map, and Reduce functions that exist on <a href=\"https://developer.mozilla.org/tr/docs/Web/JavaScript/Reference/Global_Objects/Array/prototype\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Array.prototype</a> in JavaScript.  These recreations are presented for academic intrigue, and shouldn't be used in production.</p>\n<p>Our Functions are a little more flexible than the native Javascript versions in that they can work on any containing class that implements the iterator interface.  However, they also lack some of the niceties provided in the native versions or in a library such as <a href=\"https://underscorejs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Underscore.js</a>.  For example, Underscore's Reduce implementation accounts for the following:</p>\n<blockquote>\n<p>If no memo is passed to the initial invocation of reduce, the iteratee is not invoked on the first element of the list. The first element is instead passed as the memo in the invocation of the iteratee on the next element in the list.</p>\n</blockquote>\n<p>Another area for improvement is ensuring <a href=\"https://isocpp.org/wiki/faq/const-correctness#overview-const\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">const correctness</a> and memory optimization in our function signatures.  Many of our functions and lambda expressions can (and should) be passing by <code class=\"language-text\">const &amp;</code> rather than by value.</p>\n","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/cpp-map-filter-reduce.07cc2b7.d7e38e0eca07cf1fa6baf72371843079.png","size":{"width":860,"height":484},"sizes":"(max-width: 860px) 100vw, 860px","srcset":["/assets/static/cpp-map-filter-reduce.a67b0b2.d7e38e0eca07cf1fa6baf72371843079.png 480w","/assets/static/cpp-map-filter-reduce.07cc2b7.d7e38e0eca07cf1fa6baf72371843079.png 860w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 860 484' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-c1634453eafb8efa8972990d5d58bfa4'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='10'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-c1634453eafb8efa8972990d5d58bfa4)' width='860' height='484' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAkCAYAAAA5DDySAAAACXBIWXMAAAsSAAALEgHS3X78AAANW0lEQVRo3tVYaXRURRZ%2b6pzxeOaH4zhuI6JgFBUBFwQdF0QFRBSBCLIKLqwD4wgiCmEHgaAQlkCAkLAECPuwg6III6JANhKyL5AAYScDJiQkXd/cr15X9%2bvOyvJn%2bpw6b6mqW/d%2b97tf1WsLNfgppXQz9y6X97mwuAx7084j8%2bTvnvFlLt/x5r5ma8FnLm1VN778ejVeDtbVBO9yB29%2bv0jgXy5PQY/Zceg9/xAiduXi7KWSawbCGbzLb3zmeYUNaQrhcQoLpW1MV8i64O3Xvl0DCFZNs%2b7MREb%2b7wjemIkeoXH4cG48%2boUf0gB0EyAGRSZhS%2bwpXCl1%2bTDGabcmwZvfzhyFLusVGs534ekF0sLt9pTcN5jnQvd/K/x4xBeIqwGhSgD8nWF2I3/Kw8dhCeg5Jx59Fxzy3PcSIPoICJ/MS9BABK1MxYGsAq9jfmyobr3LpQpf/KDwcKgLXQWAVckKqWcVLly2W/IZhahEhXarFOrOdmH4LoXiUlUOhOsqAWPgSpkLW%2bJO6ex2mxWHPhK4CXrwksMYtzYdI6JT0U/ed3eXA5nxQWg8pm3JRs7pwnJZ9s%2b%2b0/HiMoVeGxWelAyvT1XVlmhkvMIjc1zovVmhpMwfhOtkwDnJ%2bpg16eg6K1Znm3Qn9YM3ZiEx9yKKSspQKouWCkgnC4qxfn8%2b%2bocnCgAJwogEDULfBYnYGneyUi0w74zTI39SqB/mwsET3nG7jyr9/uu9CjkXTGK8/duzFAKELeP2%2bGpIdSyoFABT89vjT6NTSIwOipRnQNG/HK/SKDXis8WHZXySsCEBTwzZhIB/rcblK2WVUtOst%2b%2bYwqOSzdXJ9nORm9YLYhUenOXCgzNdmLlfeeYw0FL33NADNhMOnFA%2bNq8LgK1CfWafAFDtQ3ccKRfE2YslejvUWXGLX0Z%2bIZqN/RG3fxwFq8Mc3D9guYwprRAAZ/b7b1UIXOOlr3l/sUQh7ZxC%2b9UKbaKV1gj/uYVXFJovVfh0R8U7ybUDMDNW1z0ZcOL8Zc%2bY3LNFmLAuQ5fFPxeJ%2bsedtrOYfgrNx2%2bB1XEerC4LYL03D7UHRVcKgAngbJFC44UuLE20n01mneNZBqT6riO%2bWTZjv/nVtkGh9BfxawaAwkfBmyp1b36sfZ4BOs%2bI0aJHunecvh9tv9kJq5ME3m4urM528Lze1TcKl0sqBsCs9Uue7XzCKd8MmiB4FmCGH5vr0juEc4yxsTPb3jJrWgY1AoDKTvov2ZPn6Y/NLtA7waBFKSKO8Wg68jvc1nMxrPZz5BopbMjFlyv24/WJWzUjWk/eLoJaXCUAmzMUmkS4kH%2bpYgC%2b%2btEOruVyhRcXKeT9V5U7BMWfVPqMQFG84QAs3u0FIC6nQCt967Hf4Y7A6bDeCsZNnedLvYfh1h4R2HDwCIYu%2bw2vSinsSclHq0nbcP73qgHYlmkDcOyiNzDTF5tvC9yo3fYpkIK4OMHu49ZXprzjCMD32TcQAF0Cku3JGzLovlYnal3zYatgPTMU1qujYL08ElbzsWg1YRNu6bYQ1tuzRQMEkMAwXQZVlYAze8/KKe%2b346rcUZp7PLOffcE%2b8Ly8WKHjWq8dowGbBZwGMu7wmRuoAaxz7uX/iEjGiQves3585gm8MngRbmszCfd2nIbglXv1%2b5jsM2gTvEMEMBy3dI8QAMJQe%2bAKFJZUvgtoXREVf0kCm3XAfSAq9dY1T3tT93nnTfhZ6aMwvwtWJHlPgUEiks2WeJ9vyC7QKywRAxYmouHAVQgct7bc2Pzzl3CpyAam2L3X/xCbBavVZNz8vjCgczgeIABVbINmvbF7bKEjGPwVFCu0XEZgXDhT6J1HqvOboI4A84QcmqgH50X5%2bb0weW95Bl3HQegUmgzdjPs6zxKKj4b1wnD0C9lSpdFd8Tm4/d0psJqNwq2tvxYgpqBW/yiUOD6Q/H%2bGqkcL7Bo2QfwsO0PndfaXoNMv1vxn39mnw/3ukhm60y4hpzhe80HITD5dUITGA2Q7e1ZqvfkY/PHNibBeDEKTgeFY%2b58UnCko1LVdWHwFCVknMXjuDtzccrwee0urCQLYCFivjcG8LbHujyJXpSVgglsulH5YMrss0Xcc67zM3XjvPArPkNPhQyKMq5J9bV0zA5wglMk5P2Tdb7izw1RYzw/HzS0kwFds4ftzu2DU6xWKWl1CcFOLcTpgZ3/bkdFIOnK6yv8EzEeSs58BEYQxovrniioPgtketF3pUgg9WP474Lo/hpzf8vnnLmHADDnhvSGBvhSEPzDDr421g2022s48n6VMGvYOw6Z9aY6Scnmcqepz2Nm3Tr4Em8q2%2bJwcjkbI5y6/DPdKSfycq/S3wpDvFRpJubwQ6fKUiP8/StWWgPJBq6JmGzJnfP4OpB1Hi2FRGgQGr4EgKMIOsmTamn3669AEXuam/dU0TwmK8M2WXeGdlQrPhNtg8LTI%2b7arFObGKI84uq5yDTarzFFX1TX%2bL1BSWuYBInpXEgJ6ztaaQNr3mb4Zx89edDsDPbamtl0VrqfscwdsQE7ICZFnBTaeFm2Q7MaxVxOLadX%2bJ1jtr6wU235NRerRU/h//FkjtuahXNuWhyBpwzbLeX5Lrr5nY9/wrbkYveMYJnx/TPqPImj7MQTvPo3xO/MxbNNRfCnvOOZzuf98o91o44tN9pU2v9ic67E9zH1Pm3weIuO/kitt8OpsQzfZ/Wa%2b8zp0k72usWmug93rs3%2bI%2b57j2BiPdc%2bYGOg2Ogb3jYnV17ul3RF0EK/NTUbjkCR9f5e8u3NUDJ6cegivh6Xg%2bZlJeHVOsh7/15HSP%2bqgtnOv2OB89r8SmoyXZh9GnYlxaPDNITw4IU7u4/Ho5AQ8JO/uHxeL2uPjUD/4EDotyfDMuW%2bs7Qdt3SPN2Hx8SoJe/wGZU0vmPvx1vLb5eHACGor9v4gffA6YFK/t1pN1WsxL0eMbT0%2bSeFLwkPTf7bEdA4tG2Ti40beJOmPPTk/UxgdvOIpe0VnaaNuINHQUJ3ltvSAVteVdj%2bWZeGZaog7I2DG2PpR5DJ4LM8B3Zd6b81N1Ixtoh871X5uDdxamoduyTO04rwSW9wyM9p6Qa4D4M3BdDgIXpWs/%2bq3JwQeyPpNBf8gQ2uY67SLTtZ33Fqfrdx1kDgHm/WNTfH216DzbI7IgGx3vuSILL846jI9WZuHt8DS8MPOwGE3Txuns29IIyvtLMzTyBMvYYfBE%2bX1ZkNliP%2bcS3M4y/k7JUid331PyjgGRDV2jMjRT/j7LXov267n94pUZ5TyCQZYwwJYCILNIlnIOAWcCmwmAn6zK1r7SJ67B/qYzkvRaJl5eLafjXJRoMeDeYqCPtLcEXZZCc2m8thWjHENadRGnG33rBcDpLIMlkxg4M8Fr16hMTT32PRdiM4MgMnC%2bIyicw3eGwk7fGAjnkcqakWKX454WFnbU4BzCWNESAsDkMWEsOYJG%2b88LAHUdyfIA4HScmSBNugvCI0QoWgltyAaiSQBoNNABALNYDgBxls4x%2b3xHAFjfzCDrm5mjXTpDGhNE2mI5aQCWlAeArGo1P0WXB6n8Vngq2kfa7GG5cD2yhyLHZJHFgfKO69NXgvqU2KedShlQ2z2Q2SLNmDFmnM63l6DpOOlPwxqApb4AaDsCHvtIQaJuKMisEAgKH6nIdf4mYPRbk62zST2hU%2bxjYKYEjF1mkj694a553hvQKIi010TYQbXnGDKCLGCd1xJ/CLRhWcCkeF8G%2bANAmhEpUopONxGnGDgFh8LFEqBKEwA6UNdPA4wdOkIwaON1oa0BgPboDNlAxlHgWNOfrj%2bir00roCqf6Rc1qu/qbNSXQJhlAmvbydT%2bDhIbXIcMoVCShQ%2b4S5IaYbSuegCEWkSLwZJ2A0St2dqIYWaLVxqt70DUlIBN11QNGJ0jPQlGoB8AFDCWGp0kSwhGLwmqnoOiTgBY61R7ZpPC18GtCbRJe6x1atdHAhJZPHpHnrbN%2bYyLpe0s1yoBoDAxODpG5PielKPzrGVS0GnI6TDpSt1gwASAGaEdsyfTvgZAWMTMUQM4hj5QdJsL4P5qXVdscm1qUQN3YtpF2DtUrXG2eBMgsoIMYSwhe/J1cthHYOhXPceuV6EIMrjGGgBbPQPdu0KbhfY2SERpkNSv4%2bekJ1syl/s/QWPAHE/q0kFmiwCQ6jyQMJusU%2b7dfE%2b7BMUpgk4AyCYK5Tvu3Yj3tPOmAEe/qSfcCf701QGMl9Mqx3EOT7I8zJEBThaUYwCz/JwbADrGzDSTbNMw7/Xe7daFuhN9A3c6SxvUCFKXIJLaZBJBIIhkCMEhqLTNAxFrnzRleQVUACr7KYAMuo2cTyjKFDuq/gcrMnWw9I3A0ybvaZ%2bAUmwbyzyWIhNqQLCci/AlxcMcbghKS9l6XhbH2VjX1AUaoS7UqQQAzqUNUp4o856L0hnu4XznFLlG0m/OBQEOkXIyy3nPnYZj%2bY5gEFSCy4B5zx2EV/azlOgPg%2bfa9IMlVE4DnItWdW%2bemSl/6vvbMcEEuAN2fgs4bdJB9lcUcGU%2bGIbUdVOadnn%2bMIkzGa7nSArHkElO0f4fKeIp/acH0kAAAAAASUVORK5CYII=' /%3e%3c/svg%3e"}}},"context":{}}